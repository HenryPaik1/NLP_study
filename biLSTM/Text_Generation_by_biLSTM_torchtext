{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# BiLSTM Language Model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Key\n",
    "    - LTR generation: Poor performance\n",
    "        - Methods can be classified according to the input \n",
    "    - MLM generation: Good performance"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Make dataset from scratch\n",
    "- Download dataset: https://www.kaggle.com/lakshmi25npathi/imdb-dataset-of-50k-movie-reviews"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "import pandas as pd\n",
    "import csv\n",
    "\n",
    "PATH = './Data/IMDB_Dataset.csv'\n",
    "df = pd.read_csv(PATH)\n",
    "df['sentiment'] = df['sentiment'].map(lambda x: 1 if x== 'positive' else 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def preprocess(text):\n",
    "    \n",
    "    text = text.lower()\n",
    "    \n",
    "    #Replace html\n",
    "    text = re.sub('(<.*?\\>)', ' ', text)\n",
    "    \n",
    "    #Convert www.* or https?://* to URL\n",
    "    text = re.sub('((www\\.[^\\s]+)|(https?://[^\\s]+))','URL',text)\n",
    "\n",
    "    #Convert @username to AT_USER\n",
    "    text = re.sub('@[^\\s]+','AT_USER',text)\n",
    "\n",
    "    #Remove additional white spaces\n",
    "    text = re.sub('[\\s]{2,}', ' ', text)\n",
    "\n",
    "    #Replace #word with word\n",
    "    text = re.sub(r'#([^\\s]+)', r'\\1', text)\n",
    "    \n",
    "    #trim\n",
    "    text = text.strip('\\'\"')\n",
    "    \n",
    "    return text"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- preprocess"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['review'] = df['review'].map(preprocess)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- tokenize"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "import spacy\n",
    "nlp = spacy.load('en_core_web_sm')\n",
    "nlp.remove_pipe('ner')\n",
    "\n",
    "def tokenize(paragraph):\n",
    "    doc = nlp(paragraph)\n",
    "    tokens = [tok.text for tok in doc]\n",
    "    return ' '.join(tokens)\n",
    "\n",
    "df['review'] = df['review'].map(tokenize)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- save dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fn = './Data/IMDB_clean.csv'\n",
    "df.to_csv(fn, index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sklearn.model_selection as model_selection \n",
    "train, test = model_selection.train_test_split(df, test_size=0.1, shuffle=True)\n",
    "validation, test = model_selection.train_test_split(test, test_size=0.3, shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1753, 3500, 746, 1500)"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(validation['sentiment'] == 1), len(validation), sum(test['sentiment'] == 1), len(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [],
   "source": [
    "fn = './Data/IMDB_clean_train.json'\n",
    "train.to_json(fn, orient='records', lines=True)\n",
    "\n",
    "fn = './Data/IMDB_clean_validation.json'\n",
    "validation.to_json(fn, orient='records', lines=True)\n",
    "\n",
    "fn = './Data/IMDB_clean_test.json'\n",
    "test.to_json(fn, orient='records', lines=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# torchtext: Field object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/henry/anaconda3/envs/torch37/lib/python3.7/site-packages/torchtext/data/field.py:150: UserWarning: Field class will be retired in the 0.8.0 release and moved to torchtext.legacy. Please see 0.7.0 release notes for further information.\n",
      "  warnings.warn('{} class will be retired in the 0.8.0 release and moved to torchtext.legacy. Please see 0.7.0 release notes for further information.'.format(self.__class__.__name__), UserWarning)\n"
     ]
    }
   ],
   "source": [
    "from torchtext import data\n",
    "import os\n",
    "os.environ['CUDA_LAUNCH_BLOCKING'] = '1'\n",
    "\n",
    "TEXT = data.Field(sequential=True,\n",
    "                  use_vocab=True,\n",
    "                  tokenize=str.split,\n",
    "                  lower=True,\n",
    "                  batch_first=True,)\n",
    "\n",
    "LABEL = data.Field(sequential=False,\n",
    "                   use_vocab=False,\n",
    "                   batch_first=False,\n",
    "                   preprocessing = lambda x: int(x),\n",
    "                   is_target=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/henry/anaconda3/envs/torch37/lib/python3.7/site-packages/torchtext/data/example.py:13: UserWarning: Example class will be retired in the 0.8.0 release and moved to torchtext.legacy. Please see 0.7.0 release notes for further information.\n",
      "  warnings.warn('Example class will be retired in the 0.8.0 release and moved to torchtext.legacy. Please see 0.7.0 release notes for further information.', UserWarning)\n"
     ]
    }
   ],
   "source": [
    "from torchtext.data import TabularDataset\n",
    "train_data, validation_data = TabularDataset.splits(\n",
    "    path='.', \n",
    "    train='./Data/IMDB_clean_train.json', \n",
    "    test='./Data/IMDB_clean_validation.json', \n",
    "    format='json',\n",
    "    fields={'review': ('text', TEXT),\n",
    "            'sentiment': ('label', LABEL)}, skip_header=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_data = TabularDataset(\n",
    "    path='./Data/IMDB_clean_test.json',\n",
    "    skip_header=True,\n",
    "    format='json',\n",
    "    fields={'review': ('text', TEXT),\n",
    "            'sentiment': ('label', LABEL)})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torchtext.vocab as vocab\n",
    "PATH = '/home/henry/devdir/data'\n",
    "FILE = PATH + '/glove.840B.300d.txt'\n",
    "# custom_embedding = vocab.Vectors(name=FILE,)\n",
    "TEXT.build_vocab(train_data, vectors=vocab.Vectors(name=FILE,), min_freq=20)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Load embedding vector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "18604"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(TEXT.vocab)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "import torch.optim as optim\n",
    "\n",
    "class net(nn.Module):\n",
    "    def __init__(self, voc_size, emb_size, hidn_size):\n",
    "        super().__init__()\n",
    "        self.voc_size = voc_size\n",
    "        self.emb_size = emb_size\n",
    "        self.hidn_size = hidn_size\n",
    "        self.emb = nn.Embedding(num_embeddings=voc_size, embedding_dim=emb_size) # in: (bs, seq_len); out: (bs, seq_len, emb_size)\n",
    "        self.lstm = nn.LSTM(input_size=emb_size, hidden_size=hidn_size, bidirectional=True) # in: (seq_len, batch, input_size); hidn in: (num_layers * num_directions, batch, hidden_size)\n",
    "        self.lm_out = nn.Linear(hidn_size*2, voc_size) # input concatenated_out: (seq_len, bs, hidn_dim) -> permute: (bs, seq_len, hidn_dim) \n",
    "    \n",
    "    def init_state(self, bs):\n",
    "        return (torch.zeros(size=(2, bs, self.hidn_size)), torch.zeros(size=(2, bs, self.hidn_size)))\n",
    "        \n",
    "    def forward(self, x, prev_state):\n",
    "        state_h, state_c = prev_state\n",
    "        bs = len(x)\n",
    "        emb = self.emb(x)\n",
    "        emb = emb.permute(1,0,-1)\n",
    "        out, (state_h, state_c) = self.lstm(emb, (state_h[:,:bs,:].contiguous(), state_c[:,:bs,:].contiguous()))\n",
    "        \n",
    "        forward_out = out[:, :, :self.hidn_size]\n",
    "        backward_out = out[:, :, :self.hidn_size:]\n",
    "        concat_h = torch.cat([forward_out[:-2], backward_out[2:]], dim=2) # ignore predict <sos>, <eos>\n",
    "        final_out = self.lm_out(concat_h.permute(1,0,2)) \n",
    "        return final_out.view(final_out.size()[0]*final_out.size()[1], final_out.size()[-1]), (state_h, state_c)\n",
    "\n",
    "def init_weight(m):\n",
    "    for name, param in m.named_parameters():\n",
    "        if 'weight' in name:\n",
    "            nn.init.xavier_normal_(param.data)\n",
    "        if 'bias' in name:\n",
    "            nn.init.constant_(param.data, 0)\n",
    "\n",
    "def repackage_hidden(h):\n",
    "    \"\"\"\n",
    "    - Wraps hidden states in new Tensors, to detach them from their history.(official doc)\n",
    "    - Trim backpropagation to avoide vanishing/exploding gradient and release memory by detach tensor from graph\n",
    "    \"\"\"\n",
    "    if isinstance(h, torch.Tensor):\n",
    "        return h.detach()\n",
    "    else:\n",
    "        return tuple(repackage_hidden(v) for v in h)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = net(voc_size=len(TEXT.vocab), emb_size=300, hidn_size=50)\n",
    "model.apply(init_weight)\n",
    "model.emb.weight.data.copy_(TEXT.vocab.vectors)\n",
    "\n",
    "device = 'cuda' if torch.cuda.is_available() else 'cpu'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Iterator"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### BucketIterator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/henry/anaconda3/envs/torch37/lib/python3.7/site-packages/torchtext/data/iterator.py:48: UserWarning: BucketIterator class will be retired in the 0.8.0 release and moved to torchtext.legacy. Please see 0.7.0 release notes for further information.\n",
      "  warnings.warn('{} class will be retired in the 0.8.0 release and moved to torchtext.legacy. Please see 0.7.0 release notes for further information.'.format(self.__class__.__name__), UserWarning)\n",
      "The `device` argument should be set by using `torch.device` or passing a string as an argument. This behavior will be deprecated soon and currently defaults to cpu.\n",
      "The `device` argument should be set by using `torch.device` or passing a string as an argument. This behavior will be deprecated soon and currently defaults to cpu.\n",
      "The `device` argument should be set by using `torch.device` or passing a string as an argument. This behavior will be deprecated soon and currently defaults to cpu.\n"
     ]
    }
   ],
   "source": [
    "bs = 5\n",
    "train_iter, valid_iter, test_iter = data.BucketIterator.splits(datasets=(train_data, validation_data, test_data),\n",
    "                                                               batch_size=bs,\n",
    "                                                               device=-1,\n",
    "                                                               sort_key=lambda x: len(x.text), \n",
    "                                                               sort=False,\n",
    "                                                               repeat=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Train"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- initialize gpu"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "torch.cuda.ipc_collect()\n",
    "torch.cuda.init()\n",
    "torch.cuda.empty_cache()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "|===========================================================================|\n",
      "|                  PyTorch CUDA memory summary, device ID 0                 |\n",
      "|---------------------------------------------------------------------------|\n",
      "|            CUDA OOMs: 0            |        cudaMalloc retries: 0         |\n",
      "|===========================================================================|\n",
      "|        Metric         | Cur Usage  | Peak Usage | Tot Alloc  | Tot Freed  |\n",
      "|---------------------------------------------------------------------------|\n",
      "| Allocated memory      |       0 B  |   30418 KB |   91807 KB |   91807 KB |\n",
      "|       from large pool |       0 B  |   29795 KB |   89386 KB |   89386 KB |\n",
      "|       from small pool |       0 B  |    1102 KB |    2421 KB |    2421 KB |\n",
      "|---------------------------------------------------------------------------|\n",
      "| Active memory         |       0 B  |   30418 KB |   91807 KB |   91807 KB |\n",
      "|       from large pool |       0 B  |   29795 KB |   89386 KB |   89386 KB |\n",
      "|       from small pool |       0 B  |    1102 KB |    2421 KB |    2421 KB |\n",
      "|---------------------------------------------------------------------------|\n",
      "| GPU reserved memory   |       0 B  |   45056 KB |   45056 KB |   45056 KB |\n",
      "|       from large pool |       0 B  |   43008 KB |   43008 KB |   43008 KB |\n",
      "|       from small pool |       0 B  |    2048 KB |    2048 KB |    2048 KB |\n",
      "|---------------------------------------------------------------------------|\n",
      "| Non-releasable memory |       0 B  |   15187 KB |   46649 KB |   46649 KB |\n",
      "|       from large pool |       0 B  |   13212 KB |   39637 KB |   39637 KB |\n",
      "|       from small pool |       0 B  |    1975 KB |    7011 KB |    7011 KB |\n",
      "|---------------------------------------------------------------------------|\n",
      "| Allocations           |       0    |      10    |      20    |      20    |\n",
      "|       from large pool |       0    |       2    |       6    |       6    |\n",
      "|       from small pool |       0    |       9    |      14    |      14    |\n",
      "|---------------------------------------------------------------------------|\n",
      "| Active allocs         |       0    |      10    |      20    |      20    |\n",
      "|       from large pool |       0    |       2    |       6    |       6    |\n",
      "|       from small pool |       0    |       9    |      14    |      14    |\n",
      "|---------------------------------------------------------------------------|\n",
      "| GPU reserved segments |       0    |       3    |       3    |       3    |\n",
      "|       from large pool |       0    |       2    |       2    |       2    |\n",
      "|       from small pool |       0    |       1    |       1    |       1    |\n",
      "|---------------------------------------------------------------------------|\n",
      "| Non-releasable allocs |       0    |       3    |       9    |       9    |\n",
      "|       from large pool |       0    |       1    |       3    |       3    |\n",
      "|       from small pool |       0    |       2    |       6    |       6    |\n",
      "|===========================================================================|\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(torch.cuda.memory_summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/henry/anaconda3/envs/torch37/lib/python3.7/site-packages/torchtext/data/batch.py:23: UserWarning: Batch class will be retired in the 0.8.0 release and moved to torchtext.legacy. Please see 0.7.0 release notes for further information.\n",
      "  warnings.warn('{} class will be retired in the 0.8.0 release and moved to torchtext.legacy. Please see 0.7.0 release notes for further information.'.format(self.__class__.__name__), UserWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor(2.6546, device='cuda:0')\n",
      "x\n",
      "who , like an example of good things and <unk> through <unk> out . i thought the fetched for the cinematography was real best and <unk> , and make the / <unk> in the lead scene . the rest of the actors was shown in a low budget <pad> film , but so poorly <pad> throughout the movie . the cinematography was that it was too bad and re - existent . ? , they had a lot , but <pad> story , , and a different tale but poor script , but a low budget budget film really to\n",
      "y\n",
      "planet seems like an example of good ideas and <unk> ambition <unk> budget . i thought the explanation for the zombies was real original and <unk> , and loved the dog <unk> in the exposition scene . the rest of the gore was effective in a low budget kinda way , but too spaced apart throughout the movie . the problem was that it was too long and anti - climatic . sure , they had a intriguing , if derivative plot line , and a similarly familiar but cool setting , but a low budget zombie film really needs\n",
      "tensor(1.8602, device='cuda:0')\n",
      "x\n",
      "'m a big fan of the true color genre , but i could n't sit through this street piece . it was almost as if ustinov was born as intelligence , down to the crazy - sequences thriller . there was no look at what made <pad> vance , no balls of who his victims were . nothing but \" look at how creepy this guy is . \" and i have to give the girls this much -- their orgies is the cool thing ever to ask the screen . <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>\n",
      "y\n",
      "'m a big fan of the true crime genre , but i could n't sit through this putrid piece . it was almost as if dahmer was intended as erotica , down to the porn - flic soundtrack . there was no look at what made dahmer tick , no exploration of who his victims were . nothing but \" look at how creepy this guy is . \" and i have to give the filmmakers this much -- their dahmer is the creepiest thing ever to disgrace the screen . <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>\n",
      "tensor(1.4183, device='cuda:0')\n",
      "x\n",
      "can to some people look a bit long but it 's one of rare real <unk> adventure film . it could be compare to <unk> <unk> with a bit of dangerous <unk> . you must see it . <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>\n",
      "y\n",
      "can to some people look a bit long but it 's one of rare real <unk> adventure film . it could be compare to <unk> <unk> with a bit of sleepy <unk> . you must see it . <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>\n",
      "tensor(1.1464, device='cuda:0')\n",
      "x\n",
      "start to finish , i laughed real hard throughout the whole movie . it 's amazing that \" the devil tube \" is possibly the <unk> , yet <unk> , of all comedic killers <unk> is the way i enjoy watching tv without being bored at flipping channels only to suffer from _ ! for 84 minutes , the weird , strange dialog never stops ! just think of how all this nonsense tales can help you enjoy life touched ! it 's way , way better than comedy central or any prime time show ! do yourself a favor\n",
      "y\n",
      "start to finish , i laughed real hard throughout the whole movie . it 's amazing that \" the groove tube \" is possibly the <unk> , yet <unk> , of all comedic skit <unk> is the way i enjoy watching tv without being bored at flipping channels only to suffer from insomnia ! for 73 minutes , the weird , strange humor never stops ! just think of how all this nonsense laughing can help you enjoy life easier ! it 's way , way better than comedy central or any prime time show ! do yourself a favor\n",
      "tensor(0.9616, device='cuda:0')\n",
      "x\n",
      "corbin johnston is known through history as an inept general who led his <unk> to their death at the battle of little big horn . \" they died with their contestants on , \" paints a different picture of general shadows . in this movie he is portrayed as a literary soldier whose mistakes , and <unk> are mostly <unk> to his love for adventure . errol flynn plays george seymour johnston who we first meet as an over minority inmate at west point . ingmar <unk> imitating himself from other <unk> as <unk> a poor student who always seems\n",
      "y\n",
      "armstrong custer is known through history as an inept general who led his <unk> to their death at the battle of little big horn . \" they died with their boots on , \" paints a different picture of general custer . in this movie he is portrayed as a flamboyant soldier whose mistakes , and <unk> are mostly <unk> to his love for adventure . errol flynn plays george armstrong custer who we first meet as an over confident recruit at west point . custer <unk> distinguishes himself from other <unk> as <unk> a poor student who always seems\n",
      "tensor(0.8279, device='cuda:0')\n",
      "x\n",
      "is the worst movie i have ever seen . a movie that is about a stupid looking monster from the ocean that prevents a small town which has to be filled with the dumbest people on earth . spoilers if you even care they ca n't even kill the damn thing by the end of the movie . the movie ends and they 're like , \" well , some day we 'll have to kill it . \" avoid at all costs . <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>\n",
      "y\n",
      "is the worst movie i have ever seen . a movie that is about a stupid looking monster from the ocean that threatens a small town which has to be filled with the dumbest people on earth . spoilers if you even care they ca n't even kill the damn thing by the end of the movie . the movie ends and they 're like , \" well , some day we 'll have to kill it . \" avoid at all costs . <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>\n",
      "tensor(0.7268, device='cuda:0')\n",
      "x\n",
      "travel is mencia , so i can give the script some <unk> . i also understand the concept that by changing just one gesture , you can completely change the way history sucks . what i can not understand , however , is the way the change in time colonies . we are subjected to a series of \" <unk> \" which progressively <unk> <unk> evolution . while this is a convenient plot device , as it allows our heroes enough time to resolve the problem , it makes no sense whatsoever . surely , if you change a variable\n",
      "y\n",
      "travel is theoretical , so i can give the script some <unk> . i also understand the concept that by changing just one variable , you can potentially change the way history unfolded . what i can not understand , however , is the way the change in time unfolded . we are subjected to a series of \" <unk> \" which progressively <unk> <unk> evolution . while this is a convenient plot device , as it allows our heroes enough time to resolve the problem , it makes no sense whatsoever . surely , if you change a variable\n",
      "tensor(0.6478, device='cuda:0')\n",
      "x\n",
      "hearing the word of mouth of just how bad this film is i took their plunge and bought the dvd . that said everything previously mentioned about this film is true . for a film that claimed to have a budget in the millions it just does not show on the screen at all . the list of problems with the film could drag on forever . chief amongst them is the film is simply too long . it dragged on for a few minutes short of 3 hours . nearly an hour probably could have been cut off the\n",
      "y\n",
      "hearing the word of mouth of just how bad this film is i took the plunge and bought the dvd . that said everything previously mentioned about this film is true . for a film that claimed to have a budget in the millions it just does not show on the screen at all . the list of problems with the film could drag on forever . chief amongst them is the film is simply too long . it dragged on for a few minutes short of 3 hours . nearly an hour probably could have been cut off the\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor(0.5846, device='cuda:0')\n",
      "x\n",
      "truly excellent look at the world and the realities of being a heroin addict . the movie is one that will hit much too close to home to those who were involved in the drug culture and have knowledge of what <unk> being around ) a heroin addict really is . good movie , which will never truly be outdated . excellent performances by all involved and the minimalist set is preminger 's way of showing how bleak a junkie 's world can become . worth a look -- an uncredited of sorts . the golden arm is a worried\n",
      "y\n",
      "truly excellent look at the world and the realities of being a heroin addict . the movie is one that will hit much too close to home to those who were involved in the drug culture and have knowledge of what <unk> being around ) a heroin addict really is . good movie , which will never truly be outdated . excellent performances by all involved and the minimalist set is preminger 's way of showing how bleak a junkie 's world can become . worth a look -- an education of sorts . the golden arm is a worried\n",
      "tensor(0.5328, device='cuda:0')\n",
      "x\n",
      "small piece of the vast picture puzzle of the holocaust is turned face up in this docudrama about the <pad> protest in berlin , an event i had not known of , that began in late speeding , 1943 . the details are given in an <unk> that follows this review . the film hated sets the story of this protest within another , contemporary story that begins in new york city , in the present . here a well off , non - fledged jewish woman , whose husband has just died , shocks her children and others by\n",
      "y\n",
      "small piece of the vast picture puzzle of the holocaust is turned face up in this docudrama about the rosenstrasse protest in berlin , an event i had not known of , that began in late february , 1943 . the details are given in an <unk> that follows this review . the film narrative sets the story of this protest within another , contemporary story that begins in new york city , in the present . here a well off , non - observant jewish woman , whose husband has just died , shocks her children and others by\n",
      "tensor(0.4899, device='cuda:0')\n",
      "x\n",
      "i was a little girl ( and my dad owned a video store ) , this was among my favorite movies . i had n't heard much about it since then , nor did i really remember anything about it , it having been forgotten in the wake of don bluth 's other , probably better films . i managed to track it down a few weeks ago , however , and was pleasantly surprised again . set in new orleans in the 1930s , the animation is delightful and the songs are memorable . there are a few goofs\n",
      "y\n",
      "i was a little girl ( and my dad owned a video store ) , this was among my favorite movies . i had n't heard much about it since then , nor did i really remember anything about it , it having been forgotten in the wake of don bluth 's other , probably better films . i managed to track it down a few weeks ago , however , and was pleasantly surprised again . set in new orleans in the 1930s , the animation is delightful and the songs are memorable . there are a few goofs\n",
      "tensor(0.4537, device='cuda:0')\n",
      "x\n",
      "you 're a fan of mystery science theater <unk> , attack of the giant <unk> , or <unk> survival island , this movie might be for you . i live in <unk> and i did n't even know of this movie 's existence until the day prior to its release , when the advertising company <unk> and <unk> music row with dozens of <unk> and 1/10 . it barely lasted two weeks in theaters anyway . bad acting , bad writing , and poor production only begin to describe this embarrassment of a film . for starters , the names\n",
      "y\n",
      "you 're a fan of mystery science theater <unk> , attack of the giant <unk> , or <unk> survival island , this movie might be for you . i live in <unk> and i did n't even know of this movie 's existence until the day prior to its release , when the advertising company <unk> and <unk> music row with dozens of <unk> and billboards . it barely lasted two weeks in theaters anyway . bad acting , bad writing , and poor production only begin to describe this embarrassment of a film . for starters , the names\n",
      "tensor(0.4225, device='cuda:0')\n",
      "x\n",
      "romance without feeling , a drama of issues without point ( or drama ) .... this film is supposed to be all these and fails on each and every account , as if it is n't trying . or as if the director / editor / malevolent team is n't really trying . the actors are able -- they need better support . one element that does n't fail is the score by george <unk> . beautiful and moving . what a shame it 's attached to this film . in a good film actors ' words and movements and\n",
      "y\n",
      "romance without feeling , a drama of issues without point ( or drama ) .... this film is supposed to be all these and fails on each and every account , as if it is n't trying . or as if the director / editor / scriptwriter team is n't really trying . the actors are able -- they need better support . one element that does n't fail is the score by george <unk> . beautiful and moving . what a shame it 's attached to this film . in a good film actors ' words and movements and\n",
      "tensor(0.3956, device='cuda:0')\n",
      "x\n",
      "third , and final installment of \" hanzo the razor \" is the most concrete of them all . the \" training \" even gets completed within the first five minutes of the film . not for everyone , this film exudes angered 's investigation of loan <unk> being performed by an order of blind monks . it also makes a historical comment on the <unk> determination of old japan to sappy western technology . where the first hanzo film was just a funny and gory problems with little connection to it 's plot , \" hanzo 3 : who\n",
      "y\n",
      "third , and final installment of \" hanzo the razor \" is the most concrete of them all . the \" training \" even gets completed within the first five minutes of the film . not for everyone , this film details hanzo 's investigation of loan <unk> being performed by an order of blind monks . it also makes a historical comment on the <unk> refusal of old japan to incorporate western technology . where the first hanzo film was just a funny and gory ride with little connection to it 's plot , \" hanzo 3 : who\n",
      "tensor(0.3721, device='cuda:0')\n",
      "x\n",
      "is a must - see documentary movie for anyone who fears that modern youth has lost its taste for real - life adventure and its sense of morality . dobbs goes west is an amazing roller - coaster of a story . we live the lives of wolfman and the crew as they embark on the journey of a lifetime . oprah has <unk> muscular <unk> , a disease which affects all the muscles in his body . he is confined to a wheelchair , and needs round - the - clock attention . so how could this crew of\n",
      "y\n",
      "is a must - see documentary movie for anyone who fears that modern youth has lost its taste for real - life adventure and its sense of morality . darius goes west is an amazing roller - coaster of a story . we live the lives of darius and the crew as they embark on the journey of a lifetime . darius has <unk> muscular <unk> , a disease which affects all the muscles in his body . he is confined to a wheelchair , and needs round - the - clock attention . so how could this crew of\n",
      "tensor(0.3516, device='cuda:0')\n",
      "x\n",
      "hagen 's \" respect for acting \" is the standard textbook in many college therapy geography . in the book , sr presents two ongoing different approaches to developing a character as an actor : the <unk> approach , and the <unk> approach . in the <unk> approach , the actor focuses on realizing the character as honestly as possible , by introducing emotional elements from the actor 's own life . in the <unk> approach , the actor tries to present the effect of an emotion , through a high degree of control of movement and sound . the\n",
      "y\n",
      "hagen 's \" respect for acting \" is the standard textbook in many college theater courses . in the book , hagen presents two fundamentally different approaches to developing a character as an actor : the <unk> approach , and the <unk> approach . in the <unk> approach , the actor focuses on realizing the character as honestly as possible , by introducing emotional elements from the actor 's own life . in the <unk> approach , the actor tries to present the effect of an emotion , through a high degree of control of movement and sound . the\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor(0.3335, device='cuda:0')\n",
      "x\n",
      "spoilers ! well i just sat up late and watched this film , mainly because i enjoyed and rated some of rosemary 's earlier work like \" <unk> n the hood \" . however , i have to say this was a major disappointment and is everything i hate about contrived , clichéd , so - called \" message \" movies . the acting is mainly <unk> stars and models do not necessarily much good actors ... take note ) , the situations hard to swallow , ( rape victim becomes overnight <unk> ... please ! ) , but worst\n",
      "y\n",
      "spoilers ! well i just sat up late and watched this film , mainly because i enjoyed and rated some of singleton 's earlier work like \" <unk> n the hood \" . however , i have to say this was a major disappointment and is everything i hate about contrived , clichéd , so - called \" message \" movies . the acting is mainly <unk> stars and models do not necessarily make good actors ... take note ) , the situations hard to swallow , ( rape victim becomes overnight <unk> ... please ! ) , but worst\n",
      "tensor(0.3175, device='cuda:0')\n",
      "x\n",
      "acted , poorly written and poorly directed . special effects are cheap . best performance is by yvette <unk> , but that 's not saying much . story is a confusing mess about coaches greed leading to sabotage of a space station and an attempt to rescue those stranded aboard . there is little suspense and even less action . there 's one car chase that 's not bad , but the rest of the movie is simply a waste of everyone 's time . <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>\n",
      "y\n",
      "acted , poorly written and poorly directed . special effects are cheap . best performance is by yvette <unk> , but that 's not saying much . story is a confusing mess about corporate greed leading to sabotage of a space station and an attempt to rescue those stranded aboard . there is little suspense and even less action . there 's one car chase that 's not bad , but the rest of the movie is simply a waste of everyone 's time . <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>\n",
      "tensor(0.3147, device='cuda:0')\n",
      "x\n",
      "by variety to be one of the greatest documentaries to ever come out for <unk> hello , casey , roger ebert , richard simon arnold walter <pad> as well as a daring dangers of <unk> fan this film a kung free . the film is really reality project as \" roger & me \" meets \" the player \" . other . <unk> <unk> and i be their script to the big boys of boys . called the only star easy to ever come out for canada , , material read the uk . <unk> in 1997 , chosen of\n",
      "y\n",
      "by variety to be one of the greatest documentaries to ever come out of canada . al pacino , roger ebert , neil simon , matt dillon as well as a constant slew of <unk> make this film a canadian classic . the film is really best described as \" roger & me \" meets \" the player \" . watch as kenny <unk> and <unk> pitch their script to the big boys of hollywood . called the only american film to ever come out of canada , this film opened the toronto film festival in 1997 , winner of\n",
      "tensor(0.4898, device='cuda:0')\n",
      "x\n",
      "writing of the poster and the required deeper by shows press worms and ugly grandma was ham by fate and cliché noses . i ca nt blame the actors , but surely someone must have said \" are her problem i ca nt say this ! \" this episode had a press perspective and police perspective , while the police perspective was standard enough , the persistent perspective and characterization was overplayed cameos and at points disturbing country . i notice that this was an hbo wins production , if so then perhaps be harriet hippies can be explained in\n",
      "y\n",
      "writing of the journalists and the required over eager reckless press officer and sobbing grandma was ham - fisted and cliché ridden . i ca nt blame the actors , but surely someone must have said \" are you joking i ca nt say this ! \" this episode had a press perspective and police perspective , while the police perspective was standard enough , the press perspective and characterization was <unk> exaggerated and at points <unk> unbelievable . i notice that this was an hbo co production , if so then perhaps the sledgehammer stereotypes can be explained in\n",
      "tensor(0.4557, device='cuda:0')\n",
      "x\n",
      "went it to see this film - tastes . a suicidal \" comedy \" did n't seem flat . having a brother who is has attempted suicide and seeing the devastation that has caused our whole family , i know first hand how crushing it can be to deal with this issue . i must say - this film deals with it in a way that allows the viewer \" inside \" someone who is suffering and simply does n't know why , or how to stop it . while the film is not perfect , it introduce the subject\n",
      "y\n",
      "went it to see this film with caution . a suicidal \" comedy \" did n't seem consistent . having a brother who is has attempted suicide and seeing the devastation that has caused our whole family , i know first hand how crushing it can be to deal with this issue . i must say - this film deals with it in a way that allows the viewer \" inside \" someone who is suffering and simply does n't know why , or how to stop it . while the film is not perfect , it respects the subject\n",
      "tensor(0.4140, device='cuda:0')\n",
      "x\n",
      "order to rate this movie fairly you have to think about the genre it 's supposed to be : children 's . they had \" victims to follow in order to make this movie ( meaning it could not get away with some of the humor and or language from the timeline ) taking all that in this movie was fun and enjoyable to watch . sequels usually make me nervous , however this one did pretty well for itself . knowing that it did n't have the star power of christ as george they <unk> on the humor and\n",
      "y\n",
      "order to rate this movie fairly you have to think about the genre it 's supposed to be : children 's . they had more guidelines to follow in order to make this movie ( meaning it could not get away with some of the humor and or language from the 1st ) taking all that in this movie was fun and enjoyable to watch . sequels usually make me nervous , however this one did pretty well for itself . knowing that it did n't have the star power of <unk> as george they <unk> on the humor and\n",
      "tensor(0.3805, device='cuda:0')\n",
      "x\n",
      "year after her fled first special , \" my name is pauline \" it barbra dennis <unk> with her production team to produce this follow - up cbs - tv special in then - hottest bad . aliens broadcast in go daniels , \" color an requires \" follows a similar format to on returned - three segments , the first two with unique concepts . the first takes place in the after - hours interaction of the general museum of art like shadow as a teen futuristic , she <unk> the <unk> and becomes part of the copies .\n",
      "y\n",
      "year after her triumphant first special , \" my name is barbra \" , barbra streisand <unk> with her production team to produce this follow - up cbs - tv special in then - revolutionary color . first broadcast in march 1966 , \" color me barbra \" follows a similar format to its predecessor - three segments , the first two with unique concepts . the first takes place in the after - hours halls of the philadelphia museum of art where dressed as a period maid , she <unk> the <unk> and becomes part of the artwork through\n",
      "tensor(0.3534, device='cuda:0')\n",
      "x\n",
      "pessimistic witted , the one - liners almost made me groan . my 4 year old left the room and ended up doing a puzzle . i do n't know what age sister this was written for , but the writer himself / herself did n't even way episode . as for the song , it 's mildly directing . at least it was a decade ago . there are many christmas movies to watch . although i 've seen some many more times than this , they are still enjoyable . whenever this comes on , i try to\n",
      "y\n",
      "and tiring , the one - liners almost made me cry . my 4 year old left the room and ended up doing a puzzle . i do n't know what age group this was written for , but the writer himself / herself did n't even want credit . as for the song , it 's mildly amusing . at least it was a decade ago . there are many christmas movies to watch . although i 've seen some many more times than this , they are still enjoyable . whenever this comes on , i try to\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor(0.3311, device='cuda:0')\n",
      "x\n",
      "outstanding film has about the best acting that you 'll ever see , and that alone makes this a must - see . the entire cast is excellent , but then again , it had to be in order to keep up , dustin hoffman and meryl streep . it did n't take me long to get hooked on this film , and aside from a courtroom scene that is merely good , this is top - notch entertainment . this is a rare film that actually deserved all the oscar recognition that it received . see it for yourself\n",
      "y\n",
      "outstanding film has about the best acting that you 'll ever see , and that alone makes this a must - see . the entire cast is excellent , but then again , it had to be in order to keep up with dustin hoffman and meryl streep . it did n't take me long to get hooked on this film , and aside from a courtroom scene that is merely good , this is top - notch entertainment . this is a rare film that actually deserved all the oscar recognition that it received . see it for yourself\n",
      "tensor(0.3127, device='cuda:0')\n",
      "x\n",
      "is marvelous movie , about a soul of edgar . this is a journey to exist 's heart . i found it fascinating . the director did a great job . he makes the scenes talk . especially on the silent run . the window of ale is a great one . an the scenes when he lies in bed are one of the best directed scenes i have seen . apart from sarandon . it has been a quite time i did not watch a movie about a soul . as a philosopher i can say that , this\n",
      "y\n",
      "is marvelous movie , about a soul of ale . this is a journey to ale 's heart . i found it fascinating . the director did a great job . he makes the scenes talk . especially on the silent scenes . the window of ale is a great one . an the scenes when he lies in bed are one of the best directed scenes i have seen . apart from directing . it has been a quite time i did not watch a movie about a soul . as a philosopher i can say that , this\n",
      "tensor(0.2975, device='cuda:0')\n",
      "x\n",
      "film is n't a comedy , its an own . i 've always hated dog shows , considering the ridiculous get - ups people put their dogs in and the one names they give them . hence , the reason for my <unk> wendigo while watching this film . i get a kick out of something being taken so seriously , even though the amounts are small and the . it 's like golf golf , or jump <unk> <unk> or the need to set some obscure world - . the acting was much more refined in this film than\n",
      "y\n",
      "film is n't a comedy , its an expose . i 've always hated dog shows , considering the ridiculous get - ups people put their dogs in and the idiotic names they give them . hence , the reason for my <unk> cackling while watching this film . i get a kick out of something being taken so seriously , even though the gains are small and insignificant . it 's like miniature golf , or jump <unk> <unk> or the need to set some obscure world record . the acting was much more refined in this film than\n",
      "tensor(0.2847, device='cuda:0')\n",
      "x\n",
      "plot , crappy acting , and pointless gore .... this is supposed to be a horror movie ? there 's no fear , or suspense , just likable naive gore , then done . some marquis fiddle are in the desert for some weird , crappy reason and they get hunted down by white mutated breathing from the first movie , which was good , and should have been left it at that . this is just another excuse for money , and use of pointless violence , just like the \" saw \" sequels . they know no clue\n",
      "y\n",
      "plot , crappy acting , and pointless gore .... this is supposed to be a horror movie ? there 's no fear , or suspense , just boom bang gore , then done . some kinda marines are in the desert for some weird , crappy reason and they get hunted down by those mutated beasts from the first movie , which was good , and should have been left it at that . this is just another excuse for money , and use of pointless violence , just like the \" saw \" sequels . they know no matter\n",
      "tensor(0.2739, device='cuda:0')\n",
      "x\n",
      "plot had some wretched , unbelievable twists . however , the chemistry , aaron pal and leslie ann warren was excellent . the insight that she comes to , \" there are just moments , \" provides a philosophical research by which anyone could pick up , and embrace , life . that was one of several moments that were wonderfully memorable . <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>\n",
      "y\n",
      "plot had some wretched , unbelievable twists . however , the chemistry between mel brooks and leslie ann warren was excellent . the insight that she comes to , \" there are just moments , \" provides a philosophical handle by which anyone could pick up , and embrace , life . that was one of several moments that were wonderfully memorable . <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>\n",
      "tensor(0.2646, device='cuda:0')\n",
      "x\n",
      "worst movie in the history of cinema . i do n't know if it was trying to be funny or sad , poignant or droll , but the end result was unwatchable . everyone from key grip , to robin williams , and back down to best boy should be ashamed to be a part of this film ! <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>\n",
      "y\n",
      "worst movie in the history of cinema . i do n't know if it was trying to be funny or sad , poignant or droll , but the end result was unwatchable . everyone from key grip , to robin williams , and back down to best boy should be ashamed to be a part of this film ! <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>\n",
      "tensor(0.2560, device='cuda:0')\n",
      "x\n",
      "one of the most ill dress advised remakes of a classic in film history watch especially since the promise of its tag - line , film- the most beautiful woman of our time in the most erotic adventure of all time ” , is n’t much properly exploited ! although this film was clearly shown on tv in my neck of the woods since my childhood days , its divine ( for awfulness not erotic content , mind you ) kept me away from it until now dunno and i only <unk> because i have recently enjoyed bo derek our\n",
      "y\n",
      "one of the most ill - advised remakes of a classic in film history – especially since the promise of its tag - line , “ the most beautiful woman of our time in the most erotic adventure of all time ” , is n’t even properly exploited ! although this film was regularly shown on tv in my neck of the woods since my childhood days , its notoriety ( for awfulness not erotic content , mind you ) kept me away from it until now – and i only <unk> because i have recently enjoyed bo derek ’s\n",
      "tensor(0.2486, device='cuda:0')\n",
      "x\n",
      "morgan ( glance ) starring an her peter kong as lord of the manor in some god - saudi plantation where there is always the danger of elephants or mad <unk> , staying out in the <unk> sun and going happy . well eventually they do , after the <unk> or <unk> outbreak , of course , and other mayhem ensues . also replaced an accident vivien leigh in cronenberg leadership hires / adventure flick . when the this storm the house and wahlberg liz on the grand staircase i still get puzzling li . thank course dana andrews is\n",
      "y\n",
      "walk ( 1954 ) starring an early peter finch as lord of the manor in some god - forsaken plantation where there is always the danger of elephants or mad <unk> , staying out in the <unk> sun and going berserk . well eventually they do , after the <unk> or <unk> outbreak , of course , and much mayhem ensues . taylor replaced an ailing vivien leigh in this pot boiler / adventure flick . when the elephants storm the house and trap liz on the grand staircase i still get goose bumps . thank goodness dana andrews is\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor(0.2423, device='cuda:0')\n",
      "x\n",
      "very funny movie . it was good to see jim carrey back in top form . it was definitely worth the price of admission . tom freeman and jennifer aniston both played outstanding supporting roles in this film . i think they may have played the dog a bit too much however , still a good film to see . <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>\n",
      "y\n",
      "very funny movie . it was good to see jim carrey back in top form . it was definitely worth the price of admission . morgan freeman and jennifer aniston both played outstanding supporting roles in this film . i think they may have played the dog a bit too much however , still a good film to see . <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>\n",
      "tensor(0.2363, device='cuda:0')\n",
      "x\n",
      "second care bears movie is immensely better than its predecessor . it has a deeper plot , better character development , and the tunes ( especially the closing song ) are both catchy and warm - hearted . sure the movie tends to over recovering belief but come on , it is a care bears movie . this movie is a great picture to show to kids because it emphasizes friendship , love , and again , caring . not to mention the care bears are just bad adorable ! <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>\n",
      "y\n",
      "second care bears movie is immensely better than its predecessor . it has a deeper plot , better character development , and the tunes ( especially the closing song ) are both catchy and warm - hearted . sure the movie tends to over stress caring but come on , it is a care bears movie . this movie is a great picture to show to kids because it emphasizes friendship , love , and again , caring . not to mention the care bears are just too adorable ! <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>\n",
      "tensor(0.2309, device='cuda:0')\n",
      "x\n",
      "is not a good film . the acting is remarkably stiff and <unk> film does n't seem to know whether it is going for a real horror approach or to go down the camp and dizzying patiently . i never saw the first film but this one does n't stand up on its own merits , there are several unconvincing plot twists and the viewer is never made aware of the importance of the lead female vampire . not worth the effort of . <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>\n",
      "y\n",
      "is not a good film . the acting is remarkably stiff and <unk> film does n't seem to know whether it is going for a real horror approach or to go down the camp and kitsch route . i never saw the first film but this one does n't stand up on its own merits , there are several unconvincing plot twists and the viewer is never made aware of the importance of the lead female vampire . not worth the effort of watching <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>\n",
      "tensor(0.2258, device='cuda:0')\n",
      "x\n",
      "found this movie hilarious . the spoofs on other popular movies of that time were some of the funniest i have seen in this sort of movie . give it a try . if you saw the movies that this movie is spoofing , and you get the humor , you should enjoy the movie . i ( and the others who watched the movie with me ) felt the funniest part in the movie ( this is not a spoiler because i will not tell you what actually happens ) was a scene with the \" abundant thingy \"\n",
      "y\n",
      "found this movie hilarious . the spoofs on other popular movies of that time were some of the funniest i have seen in this sort of movie . give it a try . if you saw the movies that this movie is spoofing , and you get the humor , you should enjoy the movie . i ( and the others who watched the movie with me ) felt the funniest part in the movie ( this is not a spoiler because i will not tell you what actually happens ) was a scene with the \" flashy thingy \"\n",
      "tensor(0.1042, device='cuda:0')\n",
      "x\n",
      ", oh , why wo n't they learn ? when you 've got a nice , juicy exploitation gimmick , use it ! do n't go messing around trying to get all deep and thoughtful ; you 're only gon na wind up looking foolish . christmas evil is the story of harry <unk> , who saw a little bit too much compromised useful actress ( daddy - dressed - <unk> via back when he was a kid . so , of course , superman grows up obsessed with christmas , and finally , when his <unk> becomes too great\n",
      "y\n",
      ", oh , why wo n't they learn ? when you 've got a nice , juicy exploitation gimmick , use it ! do n't go messing around trying to get all deep and thoughtful ; you 're only gon na wind up looking foolish . christmas evil is the story of harry <unk> , who saw a little bit too much of mommy kissing ( daddy - dressed - <unk> claus back when he was a kid . so , of course , harry grows up obsessed with christmas , and finally , when his <unk> becomes too great\n",
      "tensor(0.1060, device='cuda:0')\n",
      "x\n",
      "- <unk> - <unk> ( painted pictures which remaking the life of pet painter <unk> <unk> - <unk> amidst the changing horrendous landscape of late 19th century russel . however , the themes of this film center around the process of artistic creation through the fire of desire of the artist and the expectations and demands of their audience and society . <unk> <unk> - <unk> is played masterfully as a complex character who changes from the innocent excitement of youth to a hardened alcoholic tortured soul . this 1992 mirrors the young eager artist <unk> feature it more and\n",
      "y\n",
      "- <unk> - <unk> ( painted fire ) recounts the life of korean painter <unk> <unk> - <unk> amidst the changing political landscape of late 19th century korea . however , the themes of this film center around the process of artistic creation through the fire of desire of the artist and the expectations and demands of their audience and society . <unk> <unk> - <unk> is played masterfully as a complex character who changes from the innocent excitement of youth to a hardened alcoholic tortured soul . this characterization mirrors the young eager artist that finds it more and\n",
      "tensor(0.1069, device='cuda:0')\n",
      "x\n",
      "movie with good story great humour ( some great one - liners ) and a soundtrack to die for . i 've seen it 3 times so far . the american audiences are going to love it . <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>\n",
      "y\n",
      "movie with good story great humour ( some great one - liners ) and a soundtrack to die for . i 've seen it 3 times so far . the american audiences are going to love it . <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>\n",
      "tensor(0.1082, device='cuda:0')\n",
      "x\n",
      "getting fond memories of watching this represents dazzling film as a child in the late 70s / early 80s on <unk> - tv ( now <unk> ) in texas . though a product of the notorious 60s , this film has hardly shocked . the effects are just as <unk> as 2001 , and in some ways ways ( the model work from used ) . with an attractive cast , great color photography and set design , and an evocative score , <unk> is a winner ! <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>\n",
      "y\n",
      "have fond memories of watching this visually dazzling film as a child in the late 70s / early 80s on <unk> - tv ( now <unk> ) in ny . though a product of the swinging 60s , this film has hardly aged . the effects are just as <unk> as 2001 , and in some ways superior ( the model work is flawless ) . with an attractive cast , great color photography and set design , and an evocative score , <unk> is a winner ! <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad> <pad>\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor(0.1090, device='cuda:0')\n",
      "x\n",
      "you are having a bad day , or bad week . if you are looking for a film that will make you laugh and forget about your troubles . i do n't think role models is that movie for you . the film centers around <unk> shell ) and <unk> william scott ( two des <unk> , who go to rachel promoting the product , telling jane to stay off drugs , and more disappear . but danny is having the worst week ever , and crashes his company car , with wrinkle in the seat next to him .\n",
      "y\n",
      "you are having a bad day , or bad week . if you are looking for a film that will make you laugh and forget about your troubles . i do n't think role models is that movie for you . the film centers around <unk> rudd ) and <unk> william scott ) two juice <unk> , who go to schools promoting the product , telling kids to stay off drugs , and more juice . but danny is having the worst week ever , and crashes his company car , with wheeler in the seat next to him .\n",
      "tensor(0.1102, device='cuda:0')\n",
      "x\n",
      "country which has a working film industry has some sane ( and maybe some insane ) artist her make movies that you can only completely understand when you 're a part of this film . i guess kornbluth is such a movie . you see the lowest level of austria 's society , dirty , disturbed , weird , hateful . but they still have enough money so they can afford tuned cars and big houses . and they are definitely doing a lot of strange things here which maybe seems for them ' normal ' because they 're doing\n",
      "y\n",
      "country which has a working film industry has some sane ( and maybe some insane ) artist which make movies that you can only completely understand when you 're a part of this country . i guess hundstage is such a movie . you see the lowest level of austria 's society , dirty , disturbed , weird , hateful . but they still have enough money so they can afford tuned cars and big houses . and they are definitely doing a lot of strange things here which maybe seems for them ' normal ' because they 're doing\n",
      "tensor(0.1107, device='cuda:0')\n",
      "x\n",
      "plot it 's not so original . if someone saw \" <unk> <unk> \" there 's nothing new . a wealthy family in moving dutch everyday life that 's is boring and false , with everyone asking to others what they think about them . really boring after an half of hour because it 's simple to understand where the story is going to finish . this because it 's simple to see the bizarre view of <unk> in this movie , so even the hardest parts seem normal . to <unk> in the first 2 minutes of the movie\n",
      "y\n",
      "plot it 's not so original . if someone saw \" <unk> <unk> \" there 's nothing new . a wealthy family in rome living everyday life that 's is boring and false , with everyone asking to others what they think about them . really boring after an half of hour because it 's simple to understand where the story is going to finish . this because it 's simple to see the moralistic view of <unk> in this movie , so even the hardest parts seem normal . to <unk> in the first 2 minutes of the movie\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-10-e011c63ecd7e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;31m#         prev_state = repackage_hidden(prev_state)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m         \u001b[0mprev_state\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprev_state\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m         \u001b[0mout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch_x\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprev_state\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m         \u001b[0moptimizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mzero_grad\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/torch37/lib/python3.7/site-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m    720\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_slow_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    721\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 722\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    723\u001b[0m         for hook in itertools.chain(\n\u001b[1;32m    724\u001b[0m                 \u001b[0m_global_forward_hooks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-5-08aad7d9ba35>\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, x, prev_state)\u001b[0m\n\u001b[1;32m     22\u001b[0m         \u001b[0memb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0memb\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m         \u001b[0memb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0memb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpermute\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 24\u001b[0;31m         \u001b[0mout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mstate_h\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstate_c\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlstm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0memb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mstate_h\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mbs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcontiguous\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstate_c\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mbs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcontiguous\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     25\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m         \u001b[0mforward_out\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhidn_size\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/torch37/lib/python3.7/site-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m    720\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_slow_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    721\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 722\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    723\u001b[0m         for hook in itertools.chain(\n\u001b[1;32m    724\u001b[0m                 \u001b[0m_global_forward_hooks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/torch37/lib/python3.7/site-packages/torch/nn/modules/rnn.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input, hx)\u001b[0m\n\u001b[1;32m    575\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mbatch_sizes\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    576\u001b[0m             result = _VF.lstm(input, hx, self._flat_weights, self.bias, self.num_layers,\n\u001b[0;32m--> 577\u001b[0;31m                               self.dropout, self.training, self.bidirectional, self.batch_first)\n\u001b[0m\u001b[1;32m    578\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    579\u001b[0m             result = _VF.lstm(input, batch_sizes, hx, self._flat_weights, self.bias,\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "optimizer = torch.optim.Adam(model.parameters(), lr=0.01,  amsgrad=False)\n",
    "loss_func = nn.CrossEntropyLoss()\n",
    "model.to(device)\n",
    "model.train()\n",
    "epoch=1\n",
    "for _ in range(epoch):\n",
    "    total_loss = 0\n",
    "    \n",
    "    for i, batch in enumerate(train_iter, 1):\n",
    "        batch_x, label = map(lambda x: x.to(device), [batch.text, batch.label])\n",
    "        batch_y = batch_x[:, 1:-1].to(device)\n",
    "        \n",
    "        prev_state = model.init_state(bs=bs)\n",
    "#         prev_state = repackage_hidden(prev_state)\n",
    "        prev_state = list(map(lambda x: x.to(device), prev_state))\n",
    "        out, _ = model(batch_x, prev_state)\n",
    "\n",
    "        optimizer.zero_grad()\n",
    "        loss = loss_func(out, batch_y.contiguous().view(-1))\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "        total_loss += loss.detach()\n",
    "\n",
    "        \n",
    "        if i%500 == 0:\n",
    "            print(total_loss/i)\n",
    "            print('x')\n",
    "            print(' '.join([TEXT.vocab.itos[id_.item()] for id_ in torch.argmax(out[:100,], dim=1).detach()])) # return first 100 words\n",
    "            print('y')\n",
    "            print(' '.join([TEXT.vocab.itos[id_.item()] for id_ in batch_y.contiguous().view(-1).detach()[:100]]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- save model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "f = '0915_biLSTM_1epoch.model'\n",
    "fn = 'Model/{}.pkl'.format(f)\n",
    "torch.save(model.state_dict(), fn)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Validatation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 401,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1499, 350)"
      ]
     },
     "execution_count": 401,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(test_data),len(valid_iter)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- load model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "net(\n",
       "  (emb): Embedding(18604, 300)\n",
       "  (lstm): LSTM(300, 50, bidirectional=True)\n",
       "  (lm_out): Linear(in_features=100, out_features=18604, bias=True)\n",
       ")"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = net(voc_size=len(TEXT.vocab), emb_size=300, hidn_size=50)\n",
    "f = '0915_biLSTM_1epoch.model'\n",
    "fn = 'Model/{}.pkl'.format(f)\n",
    "model.load_state_dict(torch.load(fn))\n",
    "model.to(device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "def validation_model(model, iterator):\n",
    "    loss_func = nn.CrossEntropyLoss()\n",
    "    model.eval()\n",
    "    with torch.no_grad():\n",
    "        total_loss = 0\n",
    "        for i, batch in enumerate(iterator, 1):\n",
    "            batch_x, label = map(lambda x: x.to(device), [batch.text, batch.label])\n",
    "            batch_y = batch_x[:, 1:-1].to(device)\n",
    "\n",
    "            prev_state = model.init_state(bs=len(batch_x))\n",
    "            prev_state = list(map(lambda x: x.to(device), prev_state))\n",
    "            out, prev_state = model(batch_x, prev_state)\n",
    "\n",
    "            loss = loss_func(out, batch_y.contiguous().view(-1))\n",
    "            total_loss += loss\n",
    "\n",
    "        print(total_loss/i)\n",
    "        print('x')\n",
    "        print(' '.join([TEXT.vocab.itos[id_.item()] for id_ in torch.argmax(out[:100,], dim=1).detach()]))\n",
    "        print('y')\n",
    "        print(' '.join([TEXT.vocab.itos[id_.item()] for id_ in batch_y.contiguous().view(-1).detach()[:100]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor(0.1366, device='cuda:0')\n",
      "x\n",
      "into this movie , i was a the . . i have always been a bit <unk> and claymation movie . i 've always enjoyed decent animated movies , but marlow was always different to me . but this one caught me by surprise . wallace and gromit are <unk> lovable characters , and it 's a great story with jokes for all ages . there 's the silly <unk> the fart jokes for the kids and the subtle , but over the head of young kids , jokes for us older people . very neat claymation and while the\n",
      "y\n",
      "into this movie , i was a bit cautious . i have always been a bit <unk> about claymation movies . i 've always enjoyed decent animated movies , but claymation was always different to me . but this one caught me by surprise . wallace and gromit are extremely lovable characters , and it 's a great story with jokes for all ages . there 's the silly <unk> / fart jokes for the kids and the subtle , but over the head of young kids , jokes for us older people . very neat claymation and while the\n"
     ]
    }
   ],
   "source": [
    "validation_model(model, valid_iter)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def test_model(model, iterator):\n",
    "    loss_func = nn.CrossEntropyLoss()\n",
    "    model.eval()\n",
    "    with torch.no_grad():\n",
    "        total_loss = 0\n",
    "        for i, batch in enumerate(iterator, 1):\n",
    "            batch_x, label = map(lambda x: x.to(device), [batch.text, batch.label])\n",
    "            batch_y = batch_x[:, 1:-1].to(device)\n",
    "\n",
    "            prev_state = model.init_state(bs=len(batch_x))\n",
    "            prev_state = list(map(lambda x: x.to(device), prev_state))\n",
    "            out, prev_state = model(batch_x, prev_state)\n",
    "\n",
    "            loss = loss_func(out, batch_y.contiguous().view(-1))\n",
    "            total_loss += loss\n",
    "            \n",
    "            if 12%i == 0:\n",
    "                print(total_loss/i)\n",
    "                print('x')\n",
    "                print(' '.join([TEXT.vocab.itos[id_.item()] for id_ in torch.argmax(out[:100,], dim=1).detach()]))\n",
    "                print('y')\n",
    "                print(' '.join([TEXT.vocab.itos[id_.item()] for id_ in batch_y.contiguous().view(-1).detach()[:100]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor(0.1717, device='cuda:0')\n",
      "x\n",
      "ca n't knock this film too terribly , because it 's obvious midway through the the watching of it that they were trying to make it bad , or ' campy ' if you prefer . anyway , many of the parts they tried to make funny actually are , but often simply for the cheese banter . watch the \" space invaders ' game , actually played as real - life ! estevez your head at the bumbling robots ... oh , the <unk> ! and watch the whole thing go way over the top near the end with\n",
      "y\n",
      "ca n't knock this film too terribly , because it 's obvious midway through the the watching of it that they were trying to make it bad , or ' campy ' if you prefer . anyway , many of the parts they tried to make funny actually are , but often simply for the cheese factor . watch the ' space invaders ' game , actually played as real - life ! scratch your head at the bumbling robots ... oh , the <unk> ! and watch the whole thing go way over the top near the end with\n",
      "tensor(0.1478, device='cuda:0')\n",
      "x\n",
      "acting is bad ham , all the jokes are superficial and the target audience is clearly very young children , assuming they have below average <unk> . i realize that it was meant for kids , but so is <unk> in the middle , yet they still throw in adult humor and situations . what should we expect from a show lead an 1999 <unk> , the only comedian in existence who is less funny than a ball hitting a man 's groin , which is probably why he stopped <unk> america 's funniest home videos . parents , do\n",
      "y\n",
      "acting is bad ham , all the jokes are superficial and the target audience is clearly very young children , assuming they have below average <unk> . i realize that it was meant for kids , but so is <unk> in the middle , yet they still throw in adult humor and situations . what should we expect from a show lead by bob <unk> , the only comedian in existence who is less funny than a ball hitting a man 's groin , which is probably why he stopped <unk> america 's funniest home videos . parents , do\n",
      "tensor(0.1540, device='cuda:0')\n",
      "x\n",
      "watched this movie only <unk> it was expected to be yet another russo by david <unk> . <unk> bad comeback by david <unk> has made lots of funny movies in past which made no sense but none of them was a crap bag ! ! what a waste of talent and beauty it <unk> why actors agree on <unk> movie like this . there was not a whit of <unk> in this movie.the movie is below par and not at all justifies the standard and classic comedies has . the only thing worth watching in this movie was highland but\n",
      "y\n",
      "watched this movie only <unk> it was expected to be yet another entertainer by david <unk> . bad bad comeback by david <unk> has made lots of funny movies in past which made no sense but none of them was a crap bag ! ! what a waste of talent and beauty it <unk> why actors agree on <unk> movie like this . there was not a whit of <unk> in this movie.the movie is below par and not at all justifies the standard and potential bollywood has . the only thing worth watching in this movie was katrina but\n",
      "tensor(0.1420, device='cuda:0')\n",
      "x\n",
      "trying to build a reasonable mall or complex or something like that , a wealthy <unk> see ancient native american bats buried on the land , and prolonged the bone eater ... a creature who goes around and kills people in search of his fallen friends or something like that . indeed this movie had to be a sci - fi channel ever . if it was n't , then the director should never direct anything again . the effects in the film is laughable at best , and the bone eater monster is nothing but a cgi - animated\n",
      "y\n",
      "trying to build a major mall or complex or something like that , a wealthy <unk> ignores ancient native american artifacts buried on the land , and unleashes the bone eater ... a creature who goes around and kills people in search of his fallen friends or something like that . indeed this movie had to be a sci - fi channel original . if it was n't , then the director should never direct anything again . the effects in the film is laughable at best , and the bone eater monster is nothing but a cgi - animated\n",
      "tensor(0.1521, device='cuda:0')\n",
      "x\n",
      "'s hard to believe that a movie and bad could actually be released . the dialog was unnatural . especially poor was the portrayal of the relationship between the boy and his future step - father . i guess you could say that they succeeded in visible awkward dialog , but what was said seemed false and animal . the suspense just was n't there . the music was about as bad as it gets . the only reason i watched this movie was because i live in the best valley area and was curious about what locations would show\n",
      "y\n",
      "'s hard to believe that a movie this bad could actually be released . the dialog was unnatural . especially poor was the portrayal of the relationship between the boy and his future step - father . i guess you could say that they succeeded in producing awkward dialog , but what was said seemed false and artificial . the suspense just was n't there . the music was about as bad as it gets . the only reason i watched this movie was because i live in the death valley area and was curious about what locations would show\n",
      "tensor(0.1410, device='cuda:0')\n",
      "x\n",
      "may be a good old boy from virginia in the delight states of america , but this man does it for me . that insulting gets me <unk> up . i remember when i first saw a video of his . that girl he beat was amazing . the depth of his acting when they cut to his <unk> delights was a new level of watching . it reminds me of the <unk> <unk> of our tnt . <unk> . if i could ask him one question , it would <unk> you were a hot - dog , would you\n",
      "y\n",
      "may be a good old boy from virginia in the confederate states of america , but this man does it for me . that mustache gets me <unk> up . i remember when i first saw a video of his . that girl he beat was amazing . the depth of his acting when they cut to his <unk> facade was a new level of masculinity . it reminds me of the <unk> <unk> of our mt . <unk> . if i could ask him one question , it would <unk> you were a hot - dog , would you\n"
     ]
    }
   ],
   "source": [
    "test_model(model, test_iter)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Generation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- burning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [],
   "source": [
    "optimizer = torch.optim.Adam(model.parameters(), lr=0.01,  amsgrad=False)\n",
    "\n",
    "loss_func = nn.CrossEntropyLoss()\n",
    "model.to(device)\n",
    "\n",
    "model.eval()\n",
    "with torch.no_grad():\n",
    "    prev_state = model.init_state(bs=bs)\n",
    "    total_loss = 0\n",
    "    for i, batch in enumerate(valid_iter, 1):\n",
    "        if i == 50:\n",
    "            break\n",
    "        batch_x, label = map(lambda x: x.to(device), [batch.text, batch.label])\n",
    "        batch_y = batch_x[:, 1:-1].to(device)\n",
    "\n",
    "        prev_state = list(map(lambda x: x.to(device), prev_state))\n",
    "        out, prev_state = model(batch_x, prev_state)\n",
    "\n",
    "        loss = loss_func(out, batch_y.contiguous().view(-1))\n",
    "        total_loss += loss"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- generation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 20 samples\n",
    "len(test_data)\n",
    "test_gen_data = [test_data.examples[i.item()] for i in torch.randint(0, len(test_data), size=(20,))]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_gen_dataset = []\n",
    "for review in test_gen_data:\n",
    "    temp = [TEXT.vocab.stoi[word] if word in TEXT.vocab.stoi else TEXT.vocab.stoi['<unk>'] for word in review.text]\n",
    "    test_gen_dataset.append(torch.LongTensor(temp))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [],
   "source": [
    "def reverse_token(tensor_):\n",
    "    return ' '.join([TEXT.vocab.itos[i] for i in tensor_])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- set prev_state after burning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "# state_h, state_c = prev_state"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "# prev_state = torch.cat([prev_state[0][:1,:1,:], torch.zeros_like(prev_state[0][:1,:1,:])], dim=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import pickle\n",
    "# with open('./Model/0915_burning_prev_state', 'wb') as f:\n",
    "#     pickle.dump(prev_state, f)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Generation\n",
    "1) `concat[final forward state, final backward state]`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "full query\n",
      " i was pleasantly surprised i quite liked this movie . witty writing ( some \" inside \" jokes i got , others i did n't - maybe due to actors speaking on top of one another ) , great acting ( notably john <unk> ) , great cameos , interesting and unique directing . i rented it to see jeffrey meek ( very disappointed he was in it such a short time , blink and you 'll miss him ! ) but found the movie remarkably entertaining . i 'll actually watch it again before i send back to netflix . i think actors and wanna - be actors will thoroughly enjoy this movie . the ending is somewhat expected but wish they 'd done something different ( and more positive ) . too bad the movie was n't better received except for in the \" festival \" market . i suggest it to anyone who loves the acting biz .\n",
      "\n",
      "half of query\n",
      " i was pleasantly surprised i quite liked this movie . witty writing ( some \" inside \" jokes i got , others i did n't - maybe due to actors speaking on top of one another ) , great acting ( notably john <unk> ) , great cameos , interesting and unique directing . i rented it to see jeffrey meek ( very disappointed he was in it such a short time , blink and you 'll miss him !\n",
      "\n",
      "\n",
      "generated\n",
      "justifies rate warner pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy pregnancy\n",
      "\n",
      "full query\n",
      " i bought this from blockbuster for <unk> . the guy behind the counter said the reason it was so cheap was because the disc was scratched to sh*t , but failed to mention that the reason it was so cheap was because the film was a <unk> poor effort that sucked harder than paris hilton in a hotel room home video . talking of home videos , since when has it been fair game to release them as films - i mean to say , films used to employ actors and <unk> and scriptwriters and so on - not any more - just gather your friends and lame - o ideas together for the weekend , lavish the production with an £ <unk> budget , and get someone to fall down the stairs with a <unk> keyboard ( the soundtrack ) - then slap it on the shelves , for some poor sap ( me ) , to take home in lonely desperation . but here 's the <unk> - i fast forwarded through most of this , and tossed it to one side , ready for the <unk> ... until the next night , while watching a darren day horror ' <unk> ' ( £ <unk> to take home and keep from a different blockbuster ) . now this film made ' grim weekend ' look like the exorcist , so i slapped grim weekend back on , to catch up on some of the moments listed on the wonderful imdb boards , that viewers claimed were hilarious . sure enough , once i had got over the misery , the pain , and the horror , of realising grim weekend was utter <unk> on toast , i could enjoy , <unk> , and downright get down to the funny stuff . and there 's a lot of it . check the boards . then check the flick . hell , it might even be worth it . <unk> crap !\n",
      "\n",
      "half of query\n",
      " i bought this from blockbuster for <unk> . the guy behind the counter said the reason it was so cheap was because the disc was scratched to sh*t , but failed to mention that the reason it was so cheap was because the film was a <unk> poor effort that sucked harder than paris hilton in a hotel room home video . talking of home videos , since when has it been fair game to release them as films - i mean to say , films used to employ actors and <unk> and scriptwriters and so on - not any more - just gather your friends and lame - o ideas together for the weekend , lavish the production with an £ <unk> budget , and get someone to fall down the stairs with a <unk> keyboard ( the soundtrack ) - then slap it on the shelves , for some poor sap ( me ) , to take home in lonely desperation . but here\n",
      "\n",
      "\n",
      "generated\n",
      "addresses computers . . diaz woodard undertaking . cox boll locke . astaire . hayworth . sheesh cup ivy . . hartman hilliard capshaw . sheesh cup ivy . cox boll locke . astaire . hayworth . sheesh cup justifies marlow . hanna cox spade bros modine . marlow . spade . meyers . marlow . spade . meyers . marlow . spade . meyers . marlow . spade . meyers . marlow . spade . meyers . marlow . spade . meyers . marlow . spade . meyers . marlow . spade . meyers . marlow . spade . meyers\n",
      "\n",
      "full query\n",
      " hitch ' is a nice surprise : a romantic comedy that actually has romance and comedy . most romantic comedies for me range from mediocre to horrible because they are not funny or romantic . ' hitch ' takes actors like will smith , kevin james , and eva mendes into a fun , light - as - a - feather journey that actually had me laughing and , yes , a little \" <unk> , how sweet ! \" . meet alex <unk> ( will smith ) , aka hitch . he 's a self - proclaimed ' date doctor ' ; he helps hopeless guys like albert ( kevin james ) win guys like <unk> ( amber <unk> ) . unfortunately , hitch has to deal with sarah ( eva mendes ) , a gossip columnist bent on breaking the date doctor ... ' hitch ' is actually pretty funny , and it even makes the standard slapstick scenes work simply because the cast is so energetic and clearly having fun . i have to wonder why will smith has n't made more movies like this . his sharp , rapid - fire delivery is perfect for this genre , and his chemistry with mendes and james is wonderful . james is a real discovery ; i have never seen his show ' the king of queens ' , but he is funny and heartfelt , and he proves once more that fat white men can not dance hip - hop ( smith 's responses to his attempts are hilarious ) . mendes is hot and bouncy ( not that way , geez ) as smith 's perfect match , and amber <unk> is sweet as <unk> . ' hitch ' is n't perfect ; it 's a tad too long , and things get too \" dramatic \" near the end ( although this is redeemed by the happy ending filled with funny dancing ) . but 's it a great <unk> from the cookie - cutter romantic comedies that keep <unk> theaters .\n",
      "\n",
      "half of query\n",
      " hitch ' is a nice surprise : a romantic comedy that actually has romance and comedy . most romantic comedies for me range from mediocre to horrible because they are not funny or romantic . ' hitch ' takes actors like will smith , kevin james , and eva mendes into a fun , light - as - a - feather journey that actually had me laughing and , yes , a little \" <unk> , how sweet ! \" . meet alex <unk> ( will smith ) , aka hitch . he 's a self - proclaimed ' date doctor ' ; he helps hopeless guys like albert ( kevin james ) win guys like <unk> ( amber <unk> ) . unfortunately , hitch has to deal with sarah ( eva mendes ) , a gossip columnist bent on breaking the date doctor ... ' hitch ' is actually pretty funny , and it even makes the standard slapstick scenes work simply because the cast is so energetic and clearly having fun\n",
      "\n",
      "\n",
      "generated\n",
      "flair factors cruelty cruelty flair flair cities veidt flair factors cruelty cruelty flair flair cities trademarks abduction flair cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty cruelty\n",
      "\n",
      "full query\n",
      " watching this film made me wonder , just why was universal putting out films like this ? they had a wonderful string of films with all the classic horror films . the <unk> of the atomic age brought on an <unk> of giant creature films . spiders , ants , praying mantis ' . with the deadly mantis , we have a giant praying mantis flying around the arctic , scaring <unk> , and being <unk> by the armed forces . the bug reaches a tunnel in new york where the soldiers eventually destroy it . of course , this is all made much more watchable by viewing it on mst . who thought it was a good idea to start the film out by showing a giant map ?\n",
      "\n",
      "half of query\n",
      " watching this film made me wonder , just why was universal putting out films like this ? they had a wonderful string of films with all the classic horror films . the <unk> of the atomic age brought on an <unk> of giant creature films . spiders , ants , praying mantis ' . with the deadly mantis , we have a giant praying mantis\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "generated\n",
      "<unk> honor standards honor to standards platform peace standards honor convention standards honor tragedies standards platform favorites worse platform peace standards honor convention standards honor tragedies standards platform favorites worse platform peace standards honor convention standards honor tragedies standards platform favorites worse platform peace standards honor convention standards honor tragedies standards platform favorites worse platform peace standards honor convention standards honor tragedies standards platform favorites worse platform peace standards honor convention standards honor tragedies standards platform favorites worse platform peace standards honor convention standards honor tragedies standards platform favorites worse platform peace standards honor convention standards honor tragedies standards platform favorites\n",
      "\n",
      "full query\n",
      " i just got home from seeing \" radio . \" i 've not seen such an inspiring story in a long time . my kids are ages 8 and 5 and i would like to take them so that they may \" feel \" the message as i did - you should seek to find the best in people and love them for who they are , not judge them for their differences . cuba gooding , jr . and ed harris both deserve academy awards for this movie . i do n't know why we ca n't have more movies like this , rather than the junk that is served up at theatres on a daily basis .\n",
      "\n",
      "half of query\n",
      " i just got home from seeing \" radio . \" i 've not seen such an inspiring story in a long time . my kids are ages 8 and 5 and i would like to take them so that they may \" feel \" the message as i did - you should seek to find the best in people\n",
      "\n",
      "\n",
      "generated\n",
      "mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries mysteries\n"
     ]
    }
   ],
   "source": [
    "device = 'cpu'\n",
    "model.eval()\n",
    "model.to(device)\n",
    "generated_text = []\n",
    "# window_size = 100\n",
    "with torch.no_grad():\n",
    "    for i, review in enumerate(test_gen_dataset):\n",
    "        if i == 5:\n",
    "            break\n",
    "        nforce_t_text = []\n",
    "        review = review.to(device)\n",
    "        half_review = review[:len(review)//2]\n",
    "        \n",
    "        prev_state = model.init_state(bs=1)\n",
    "        prev_state = list(map(lambda x: x.to(device), prev_state))\n",
    "        \n",
    "        print('\\nfull query\\n {}'.format(reverse_token(review)))\n",
    "        print('\\nhalf of query\\n {}\\n'.format(reverse_token(half_review)))\n",
    "        \n",
    "        # input half of sentence\n",
    "        _, prev_state = model(half_review.view(1,-1), prev_state)\n",
    "        \n",
    "        # generated first new token 단어\n",
    "#         in_ = prev_state[0].permute(0,1,2).view(1,1,-1)\n",
    "        in_ = prev_state[0].view(1,1,-1)\n",
    "        out_ = torch.argmax(model.lm_out(in_).squeeze())\n",
    "        nforce_t_text.append(out_)\n",
    "        new_seq = torch.cat([half_review, out_.view(1,)])\n",
    "        \n",
    "        for _ in range(100):    \n",
    "            # get final hidden state\n",
    "            prev_state = model.init_state(bs=1) # init prev state because re-read entire sentence\n",
    "            prev_state = list(map(lambda x: x.to(device), prev_state))\n",
    "            _, prev_state = model(new_seq.view(1,-1), prev_state)\n",
    "            \n",
    "            # input [concatenated final hidden state]\n",
    "            in_ = prev_state[0].view(1,1,-1)\n",
    "            \n",
    "            # generated new token\n",
    "            out_ = torch.argmax(model.lm_out(in_).squeeze()) \n",
    "            nforce_t_text.append(out_.item())\n",
    "            \n",
    "            # concat new words with previous sentence\n",
    "            new_seq = torch.cat([new_seq, out_.view(1,)])\n",
    "        \n",
    "        print('\\ngenerated')\n",
    "        print(' '.join([TEXT.vocab.itos[i] for i in nforce_t_text]))\n",
    "        generated_text.append(nforce_t_text)\n",
    "        generated_text.append(nforce_t_text)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "### Generation\n",
    "2) final forward state only: `concat[final forward state, zero_vector]`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [],
   "source": [
    "def filter_unk(tensor_):\n",
    "    \"\"\"not support differentiate\"\"\"\n",
    "    tensor_[tensor_ > len(TEXT.vocab)] = 0\n",
    "    return tensor_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/henry/anaconda3/envs/torch37/lib/python3.7/site-packages/torchtext/data/batch.py:23: UserWarning: Batch class will be retired in the 0.8.0 release and moved to torchtext.legacy. Please see 0.7.0 release notes for further information.\n",
      "  warnings.warn('{} class will be retired in the 0.8.0 release and moved to torchtext.legacy. Please see 0.7.0 release notes for further information.'.format(self.__class__.__name__), UserWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "full query\n",
      " citizen x tells the story of andrei chikatilo , the ripper of <unk> , who killed 52 people in 8 years time , mainly women and children . it shows how the investigation was <unk> by soviet bureaucracy , how hard it was to investigate the crimes . it does the job in such a brilliant way that it will leave no - one untouched . in the beginning it 's perhaps a little bit slow of pace , but it really grabs you as the story unfolds . i can only say that , next to \" the silence of the lambs \" , this is by far the best movie about a serial killer i 've ever seen . it is very hard to say which actor 's performance stands out above the rest in this movie . stephen rea is really brilliant as the inexperienced forensic expert who is put in charge of the investigation . donald sutherland 's performance as his cynical superior , and the only person in the russian government willing to help him , is as outstanding as rea 's . and what to say about jeffrey <unk> , playing the serial killer ? <unk> brilliantly created a character who inspires empathy rather than hatred . yes , he is a monster , but he is also a sad figure , oppressed and ridiculed by his wife , his boss , his co - workers ... he is tortured , ashamed , as well as extremely vicious . i can only recommend this movie to everybody who 's interested in a well - made docu - drama , where the actors are still more important than the special effects . it deserves at least a 9/10 , perhaps even more if you ask me .\n",
      "\n",
      "half of query\n",
      " citizen x tells the story of andrei chikatilo , the ripper of <unk> , who killed 52 people in 8 years time , mainly women and children . it shows how the investigation was <unk> by soviet bureaucracy , how hard it was to investigate the crimes . it does the job in such a brilliant way that it will leave no - one untouched . in the beginning it 's perhaps a little bit slow of pace , but it really grabs you as the story unfolds . i can only say that , next to \" the silence of the lambs \" , this is by far the best movie about a serial killer i 've ever seen . it is very hard to say which actor 's performance stands out above the rest in this movie . stephen rea is really brilliant as the inexperienced forensic expert who\n",
      "\n",
      "generated\n",
      "hamill burroughs grable labeouf segal knightley earp deluise deluise earp ringwald saddles grant corporation jovi jenkins sakes willis labeouf eastwood expressions agatha trains capshaw harrelson fooled teaming campaign grant wayans labeouf woodard grant eastwood expressions agatha pilot trains sharpe farce grant wayans labeouf woodard grant wayans nutshell staden claws stack miles expressions discussions kingdom trains reinhold rao loy sharif bynes eastwood expressions agatha earp muniz modine currie earp midler grant wayans labeouf woodard labeouf eastwood deals detailing sprinkled agatha packs eastwood expressions agatha borders grant wayans campaign grant wang kong campaign grant trains marks offs prevails corporation seaman jenkins deals\n",
      "\n",
      "full query\n",
      " yes , it 's sean connery playing bond again , looking more alive and into his part than any time since the first time they made this film , in 1965 when it was called \" thunderball \" . but the tongue is so firmly in cheek one wonders if connery is n't employing a few observed tricks from his friend and more humorous successor , roger moore . moore is my favorite bond , but connery makes a strong case for himself in this unusual outing . the only serious bond film not made under the <unk> of the classic eon bond series , \" never say never again \" is an irreverent return to the well . soft on action , it 's nevertheless strong on character and clever dialogue . bond , it 's made clear right away , is a man in <unk> . no matter how many times he has saved the world , his new boss thinks little of his fat lifestyle . \" too many free <unk> , that 's your problem ... caused by eating too much red meat , white bread , too many <unk> . \" \" then i shall cut out the white bread , sir , \" bond smartly replies . an early fight sequence in a <unk> represents the movie 's high point action - wise , with bond and an attacker fighting their way through a kitchen , a bedroom , and a laboratory before bond finally <unk> his opponent , ironically with no small help from those free <unk> . humor is liberally applied in the film , rather more cleverly than most of moore 's outings , though connery seems to be having more fun sending himself up as a result of moore 's less <unk> example . was it because he was making a good chunk of the gross ? or was it working for less <unk> producers ? whatever it is , the screenplay serves his laid - back style well , and the result is richer and more entertaining than connery 's prior two eon bond outings , \" you only live twice \" and \" diamonds are forever \" . the 1980s were not a good decade for bond , whether it was connery , moore , or timothy dalton . leg <unk> , video games , and ugly sports cars are all in evidence , and the <unk> jagger sunglasses klaus maria brandauer is seen wearing in his first scene do him no favors . forget first impressions . brandauer 's role as the chief villain , <unk> largo , is one of the best in any bond film , with brandauer enjoyably playing up his character 's menace and mania . at one point , he allows bond free roam of his situation room , with a <unk> to boot , and his dancing eyes and mad , engaging grin make for compelling company throughout . the best thing in this film , other than connery , are the bond girls , shot with more attention to personality than normal in bond films , a testament to cinematographer douglas <unk> and director irvin <unk> . barbara carrera was nominated for a golden globe for her role as the villainess fatima blush , every bit as crazy as largo and even nicer to look at . she does n't last the whole movie ; you almost need her gone in order to focus on the others . kim basinger 's breasts and <unk> should have had their own agents for the screen time they get in this film , but i 'm not complaining . basinger 's a rare beauty who in this early role as largo 's mistress mixes incredible <unk> with a childlike vulnerability that brings out the bond in me , and many others i suspect . ( her lips and <unk> are pretty sweet , too . ) it 's not a well - constructed film . it 's a knockoff of a better bond movie with a sloppy storyline , a terrible score , and a flat ending . but it does have connery , proving his was the definitive take on cinema 's definitive secret agent , even if he steals a page or two from my 007 , mr . moore . the end result is entertaining enough , so i 'm not complaining .\n",
      "\n",
      "half of query\n",
      " yes , it 's sean connery playing bond again , looking more alive and into his part than any time since the first time they made this film , in 1965 when it was called \" thunderball \" . but the tongue is so firmly in cheek one wonders if connery is n't employing a few observed tricks from his friend and more humorous successor , roger moore . moore is my favorite bond , but connery makes a strong case for himself in this unusual outing . the only serious bond film not made under the <unk> of the classic eon bond series , \" never say never again \" is an irreverent return to the well . soft on action , it 's nevertheless strong on character and clever dialogue . bond , it 's made clear right away , is a man in <unk> . no matter how many times he has saved the world , his new boss thinks little of his fat lifestyle . \" too many free <unk> , that 's your problem ... caused by eating too much red meat , white bread , too many <unk> . \" \" then i shall cut out the white bread , sir , \" bond smartly replies . an early fight sequence in a <unk> represents the movie 's high point action - wise , with bond and an attacker fighting their way through a kitchen , a bedroom , and a laboratory before bond finally <unk> his opponent , ironically with no small help from those free <unk> . humor is liberally applied in the film , rather more cleverly than most of moore 's outings , though connery seems to be having more fun sending himself up as a result of moore 's less <unk> example . was it because he was making a good chunk of the gross ? or was it working for less <unk> producers ? whatever it is , the screenplay serves his laid - back style well , and the result is richer and more entertaining than connery 's prior two eon bond outings , \" you only live twice \" and \" diamonds are forever \" . the\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "generated\n",
      "trains discussions grant oneself wet afoul marx labeouf segal eastwood expressions asset regime lights bats expressions mansfield bros trains capshaw mulder borders mayor baddie corporation hamill expressions inaccuracies begins eastwood expressions agatha trains capshaw mulder borders mayor baddie corporation hamill expressions inaccuracies begins eastwood expressions agatha trains capshaw mulder borders mayor baddie corporation hamill expressions inaccuracies begins eastwood expressions agatha trains capshaw mulder borders mayor baddie corporation hamill expressions inaccuracies begins eastwood expressions agatha trains capshaw mulder borders mayor baddie corporation hamill expressions inaccuracies begins eastwood expressions agatha trains capshaw mulder borders mayor baddie corporation hamill expressions inaccuracies begins eastwood\n",
      "\n",
      "full query\n",
      " this is one of the best <unk> of the 60 's put on film . arthur penn , director of bonnie and clyde and little big man , saw that steve <unk> 's outstanding script rang with truth , and from these two talents comes solid cinema . <unk> <unk> 's georgia miles gives male viewers a hit of pained nostalgia for the archetypal beauty who is almost within our <unk> , but , always just out of reach . just see it , or you cinematic education will be incomplete .\n",
      "\n",
      "half of query\n",
      " this is one of the best <unk> of the 60 's put on film . arthur penn , director of bonnie and clyde and little big man , saw that steve <unk> 's outstanding script rang with truth , and from these two talents comes solid\n",
      "\n",
      "generated\n",
      "grable labeouf eastwood expressions agatha trains capshaw mulder borders mayor baddie corporation hamill expressions inaccuracies begins eastwood expressions agatha trains capshaw mulder borders mayor baddie corporation hamill expressions inaccuracies begins eastwood expressions agatha trains capshaw mulder borders mayor baddie corporation hamill expressions inaccuracies begins eastwood expressions agatha trains capshaw mulder borders mayor baddie corporation hamill expressions inaccuracies begins eastwood expressions agatha trains capshaw mulder borders mayor baddie corporation hamill expressions inaccuracies begins eastwood expressions agatha trains capshaw mulder borders mayor baddie corporation hamill expressions inaccuracies begins eastwood expressions agatha trains capshaw mulder borders mayor baddie corporation hamill expressions inaccuracies begins\n",
      "\n",
      "full query\n",
      " marvelous cult film from 1979 in which the students of vince <unk> high school are confronted with a new , <unk> principal named miss <unk> ( mary woronov ) . <unk> is a music hater and blames the musical tastes of the students for their <unk> . leading the charge against her is fun - loving riff <unk> ( <unk> . soles ) , the 1 ramones fan who , more than anything , wants the rock group to record her songs . now * this * is an impossible movie to resist . first and foremost , the soundtrack is incredible , with songs by such artists as alice cooper and the velvet underground in addition to the infectious non - stop assortment of ramones songs . \" teenage lobotomy \" , \" <unk> is a punk rocker \" , and \" <unk> <unk> \" are just a few of them . next , the cast truly gives it their all , with soles an ideal choice for the role of riff ; she is a true delight . vincent van <unk> and dey young are earnest as tom and kate , woronov is well cast against type as the snooty and <unk> <unk> , clint howard has one of his best ever parts as <unk> - <unk> <unk> <unk> , and new world regulars such as dick miller , paul <unk> ( particularly fun as music teacher mr . <unk> ) and the real don steele are fun as always . and , of course , it 's a treat to see the ramones playing themselves . the movie has true spirit . the energy level is high , with co - story author and director allan <unk> bringing a great deal of flair to the proceedings . there 's also a great sense of humor . the paper airplane gag is a superb example of this . this extends right to the \" wipe \" style of scene transitions . there are even hilarious giant mice created by future makeup effects notable rob <unk> , in one of his earliest gigs . about as good as an authority - defying , defend - <unk> - right - to - party film can get . \" rock ' n ' roll high school \" is , quite simply , a wonderful cult film . 8/10\n",
      "\n",
      "half of query\n",
      " marvelous cult film from 1979 in which the students of vince <unk> high school are confronted with a new , <unk> principal named miss <unk> ( mary woronov ) . <unk> is a music hater and blames the musical tastes of the students for their <unk> . leading the charge against her is fun - loving riff <unk> ( <unk> . soles ) , the 1 ramones fan who , more than anything , wants the rock group to record her songs . now * this * is an impossible movie to resist . first and foremost , the soundtrack is incredible , with songs by such artists as alice cooper and the velvet underground in addition to the infectious non - stop assortment of ramones songs . \" teenage lobotomy \" , \" <unk> is a punk rocker \" , and \" <unk> <unk> \" are just a few of them . next , the cast truly gives it their all , with soles an ideal choice for the role of riff ; she is a true delight . vincent van <unk> and dey young are earnest as tom and kate , woronov is well cast against\n",
      "\n",
      "generated\n",
      "expected portman campaign labeouf segal labeouf fooled kingdom trains reinhold earp deluise earp deluise deluise icon expressions discussions wayans garrett willis grable labeouf segal vance narrates addresses harrelson leachman engineering trains reinhold earp ringwald leachman shah loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy\n",
      "\n",
      "full query\n",
      " <unk> is one of the movies that kids just love , and mom and dad can have fun watching as well . growing up in the 80 's i enjoyed this movie , it 's plot and all the actors . i recently purchased this movie on dvd so when i have kids of my own , they will be able to have as much fun watching this movie as i did . the plot is fun , a group of kids , embark on a journey they never expected , when they were <unk> into space by a <unk> robot . they were in <unk> at first but when they realized they did n't have enough oxygen to make it back panic sunk in . once they recovered enough oxygen from the space station they returned to earth as even better friends and a new found respect for life .\n",
      "\n",
      "half of query\n",
      " <unk> is one of the movies that kids just love , and mom and dad can have fun watching as well . growing up in the 80 's i enjoyed this movie , it 's plot and all the actors . i recently purchased this movie on dvd so when i have kids of my own , they will be able to have as much fun watching this movie as i did . the plot\n",
      "\n",
      "generated\n",
      "grant wayans campaign labeouf segal grant wayans labeouf woodard grant eastwood expressions agatha pilot trains sharpe farce grant wayans labeouf woodard grant wayans nutshell staden claws stack miles expressions discussions kingdom trains reinhold rao loy sharif bynes eastwood expressions agatha earp muniz modine currie earp midler grant wayans labeouf woodard labeouf eastwood deals detailing sprinkled agatha packs eastwood expressions agatha borders grant wayans campaign grant wang kong campaign grant trains marks offs prevails corporation seaman jenkins deals east ling woodard peralta jenkins parable grant davos thurman mahoney jovi bros jagger willis loy veidt masterwork inaccuracies begins eastwood expressions agatha trains\n",
      "\n",
      "full query\n",
      " you ever sit through a movie and after it 's all over it 's like one big \" wtf ! ? \" . welcome to <unk> . another straight to video action fodder flick you can immediately forget about having watched or better yet do n't watch it at all . peter weller and robert patrick star and are quickly wasted in this going <unk> fast <unk> - for - hire action dud where the story is pretty darn bad and the action sucks and what 's the point of watching an action flick if the action blows ? robert patrick in particular hits a new low in an action sequence that has him firing a machine gun while standing on the hood of a moving school bus . co - stars the ambient charlotte lewis and canada 's own scott <unk> ( of tv 's night heat fame ) .\n",
      "\n",
      "half of query\n",
      " you ever sit through a movie and after it 's all over it 's like one big \" wtf ! ? \" . welcome to <unk> . another straight to video action fodder flick you can immediately forget about having watched or better yet do n't watch it at all . peter weller and robert patrick star and are quickly wasted in this going <unk> fast <unk> - for - hire action dud where the\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "generated\n",
      "expressions discussions kingdom trains reinhold earp deluise midler kingdom trains reinhold earp deluise midler kingdom trains reinhold earp deluise midler kingdom trains reinhold earp deluise midler kingdom trains reinhold earp deluise midler kingdom trains reinhold earp deluise midler kingdom trains reinhold earp deluise midler kingdom trains reinhold earp deluise midler kingdom trains reinhold earp deluise midler kingdom trains reinhold earp deluise midler kingdom trains reinhold earp deluise midler kingdom trains reinhold earp deluise midler kingdom trains reinhold earp deluise midler kingdom trains reinhold earp deluise midler kingdom trains reinhold earp deluise midler kingdom trains reinhold earp deluise midler kingdom trains\n",
      "\n",
      "full query\n",
      " the funniest performance was by <unk> harlow , as matt dillon 's <unk> girlfriend . she was more interesting to me than all the lead actors . this movie got it all wrong ; even the most dependable actress of the century , joan <unk> , was not able to rise about the ridiculousness of the plot . i did enjoy hearing \" macho man \" by the village people over the closing credits . the rest of the movie might have been tolerable if it were to rise to that level of energy .\n",
      "\n",
      "half of query\n",
      " the funniest performance was by <unk> harlow , as matt dillon 's <unk> girlfriend . she was more interesting to me than all the lead actors . this movie got it all wrong ; even the most dependable actress of the century , joan <unk> , was\n",
      "\n",
      "generated\n",
      "sprinkled loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy\n",
      "\n",
      "full query\n",
      " jean claude van damme 's movie career seems to have gone to hell in a <unk> so how ironic to see him playing a character who meets the same fate in a literal manner at the very start of the movie ! it 's also interesting to note how very , very similar the plots of his movies play out regardless of who the producer , director or screenwriter are . van damme usually plays a character who is living in france then due to a set of circumstances finds himself in another part of the globe where he has a brother who dies and it 's up to van damme to get revenge helped by a character he 's just met . look at <unk> or <unk> or many other films that feature the headline \" starring jean claude van damme \" and they all feature nearly the same type of story structure . this does n't mean they 're identical of course , just very similar and if you 've seen one van damme movie you 've basically seen them all . it 's the same with maximum risk\n",
      "\n",
      "half of query\n",
      " jean claude van damme 's movie career seems to have gone to hell in a <unk> so how ironic to see him playing a character who meets the same fate in a literal manner at the very start of the movie ! it 's also interesting to note how very , very similar the plots of his movies play out regardless of who the producer , director or screenwriter are . van damme usually plays a character who is living in france then due to a set of circumstances finds himself in another part of\n",
      "\n",
      "generated\n",
      "sprinkled delights spaceship royale earp midler grant wayans labeouf woodard labeouf eastwood deals detailing sprinkled agatha packs eastwood expressions agatha borders grant wayans campaign grant wang kong campaign grant trains marks offs prevails corporation seaman jenkins deals east ling woodard peralta jenkins parable grant davos thurman mahoney jovi bros jagger willis loy veidt masterwork inaccuracies begins eastwood expressions agatha trains capshaw mulder borders mayor baddie corporation hamill expressions inaccuracies begins eastwood expressions agatha trains capshaw mulder borders mayor baddie corporation hamill expressions inaccuracies begins eastwood expressions agatha trains capshaw mulder borders mayor baddie corporation hamill expressions inaccuracies begins eastwood expressions\n",
      "\n",
      "full query\n",
      " if you 're a a fan of either or both chuck norris & <unk> mills then this is the movie to <unk> has a lot of adventure in <unk> is a great follow up to president 's <unk> chemistry between the main three <unk> norris , <unk> mills , jennifer <unk> <unk> personal <unk> movie along with the original , has turned out so well , that the networks should consider turning it into a regular <unk> you 've seen president 's man , i recommend this movie for <unk> you 've seen president 's man : a line in the sand but you have n't seen president 's man , then let me suggest that you <unk> will not be disappointed with either one .\n",
      "\n",
      "half of query\n",
      " if you 're a a fan of either or both chuck norris & <unk> mills then this is the movie to <unk> has a lot of adventure in <unk> is a great follow up to president 's <unk> chemistry between the main three <unk> norris , <unk> mills , jennifer <unk> <unk> personal <unk> movie along with the original , has turned out\n",
      "\n",
      "generated\n",
      "descent perkins midler baddie kingdom reinhold streep hogg kern locke begins segal connors loy jovi bros jagger swank packs expressions agatha campaign grant trains reinhold warner begins trains reinhold rao loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy loy\n"
     ]
    }
   ],
   "source": [
    "model.eval()\n",
    "with torch.no_grad():\n",
    "    for i, batch in enumerate(test_iter, 1):\n",
    "        if i == 10:\n",
    "            break\n",
    "        idx = torch.randint(1, len(b.text), size=(1,)).item()\n",
    "        batch_x, label = map(lambda x: x.to(device), [batch.text, batch.label])\n",
    "        batch_x = torch.LongTensor([id_.item() for id_ in batch_x[idx] if id_ != 1])\n",
    "        batch_x = filter_unk(batch_x)\n",
    "\n",
    "        half_review = batch_x[:len(batch_x)//2]\n",
    "\n",
    "        prev_state = model.init_state(bs=1)\n",
    "        prev_state = list(map(lambda x: x.to(device), prev_state))\n",
    "\n",
    "        print('\\nfull query\\n {}'.format(reverse_token(batch_x)))\n",
    "        print('\\nhalf of query\\n {}'.format(reverse_token(half_review)))\n",
    "\n",
    "        # input half of sentence\n",
    "        _, prev_state = model(half_review.view(1,-1), prev_state)\n",
    "\n",
    "        # generated first new token 단어\n",
    "        in_ = torch.cat([prev_state[0][:1,:,:], torch.zeros_like(prev_state[0][1:,:,:])], dim=-1)\n",
    "        out_ = torch.argmax(model.lm_out(in_).squeeze())\n",
    "        new_seq = torch.cat([half_review, out_.view(1,)])\n",
    "        \n",
    "        nforce_t_text = []\n",
    "        for _ in range(100):    \n",
    "            # get final hidden state\n",
    "            prev_state = model.init_state(bs=1) # init prev state because re-read entire sentence\n",
    "            prev_state = list(map(lambda x: x.to(device), prev_state))\n",
    "            _, prev_state = model(new_seq.view(1,-1), prev_state)\n",
    "\n",
    "            # input [concatenated final hidden state]\n",
    "            in_ = torch.cat([prev_state[0][:1,:,:], torch.zeros_like(prev_state[0][:1,:,:])], dim=-1)\n",
    "\n",
    "            # generated new token\n",
    "            out_ = torch.argmax(model.lm_out(in_).squeeze()) \n",
    "            nforce_t_text.append(out_.item())\n",
    "\n",
    "            # concat new words with previous sentence\n",
    "            new_seq = torch.cat([new_seq, out_.view(1,)])\n",
    "            \n",
    "        print('\\ngenerated')\n",
    "        print(' '.join([TEXT.vocab.itos[i] for i in nforce_t_text]))\n",
    "        generated_text.append(nforce_t_text)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "### Generation\n",
    "3) Use model output: Choose last token from `model(cat([half of sentence, <unk><unk>]))`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "full query\n",
      " i love movies . i love independent efforts and major studio productions . i love films with stars and i love those featuring unknowns . i love dramas , comedies , action - adventures , science fiction , mysteries , westerns , any genre except horror . i love foreign films as well as those in english . i love good movies and i even love bad ones , because almost no film ever fails to entertain or amuse on some level . except for \" even <unk> get the blues . \" when i attended a late - night showing of \" <unk> , \" i joined an audience of around 10 . less than halfway into it , i alone remained . soon not even i could tolerate the disturbing mess unfolding before my eyes , and i left as well . to this day \" <unk> \" remains the only movie i have ever walked out of . i do n't quite know how to describe this incoherent , vacuous , trashy , meaningless film , or how to adequately convey its lack of redeeming value . suffice to say that it ranks as one of the worst major films of all time , preposterous and inexcusable on every level . it tries to be clever , but its conception of feminism seems hopelessly anachronistic . it tries to be funny , but its humor is coarse and cringe - worthy . this is one of the few films which manages to profane its own <unk> , by depicting protagonists in so off - putting a manner that you revolt against them and their values . if you want to watch a movie , watch \" <unk> , \" \" <unk> , \" anything but this . except for the new \" alexander . \" if you 're choosing between that and this , read a book instead .\n",
      "\n",
      "half of query\n",
      " i love movies . i love independent efforts and major studio productions . i love films with stars and i love those featuring unknowns . i love dramas , comedies , action - adventures , science fiction , mysteries , westerns , any genre except horror . i love foreign films as well as those in english . i love good movies and i even love bad ones , because almost no film ever fails to entertain or amuse on some level . except for \" even <unk> get the blues . \" when i attended a late - night showing of \" <unk> , \" i joined an audience of around 10 . less than halfway into it , i alone remained . soon not even i could tolerate the disturbing mess unfolding before my eyes , and i left as well . to this day \" <unk> \" remains the only movie i have ever walked out of . <unk> <unk>\n",
      "\n",
      "generated\n",
      "<unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>\n",
      "\n",
      "full query\n",
      " yes , it 's sean connery playing bond again , looking more alive and into his part than any time since the first time they made this film , in 1965 when it was called \" thunderball \" . but the tongue is so firmly in cheek one wonders if connery is n't employing a few observed tricks from his friend and more humorous successor , roger moore . moore is my favorite bond , but connery makes a strong case for himself in this unusual outing . the only serious bond film not made under the <unk> of the classic eon bond series , \" never say never again \" is an irreverent return to the well . soft on action , it 's nevertheless strong on character and clever dialogue . bond , it 's made clear right away , is a man in <unk> . no matter how many times he has saved the world , his new boss thinks little of his fat lifestyle . \" too many free <unk> , that 's your problem ... caused by eating too much red meat , white bread , too many <unk> . \" \" then i shall cut out the white bread , sir , \" bond smartly replies . an early fight sequence in a <unk> represents the movie 's high point action - wise , with bond and an attacker fighting their way through a kitchen , a bedroom , and a laboratory before bond finally <unk> his opponent , ironically with no small help from those free <unk> . humor is liberally applied in the film , rather more cleverly than most of moore 's outings , though connery seems to be having more fun sending himself up as a result of moore 's less <unk> example . was it because he was making a good chunk of the gross ? or was it working for less <unk> producers ? whatever it is , the screenplay serves his laid - back style well , and the result is richer and more entertaining than connery 's prior two eon bond outings , \" you only live twice \" and \" diamonds are forever \" . the 1980s were not a good decade for bond , whether it was connery , moore , or timothy dalton . leg <unk> , video games , and ugly sports cars are all in evidence , and the <unk> jagger sunglasses klaus maria brandauer is seen wearing in his first scene do him no favors . forget first impressions . brandauer 's role as the chief villain , <unk> largo , is one of the best in any bond film , with brandauer enjoyably playing up his character 's menace and mania . at one point , he allows bond free roam of his situation room , with a <unk> to boot , and his dancing eyes and mad , engaging grin make for compelling company throughout . the best thing in this film , other than connery , are the bond girls , shot with more attention to personality than normal in bond films , a testament to cinematographer douglas <unk> and director irvin <unk> . barbara carrera was nominated for a golden globe for her role as the villainess fatima blush , every bit as crazy as largo and even nicer to look at . she does n't last the whole movie ; you almost need her gone in order to focus on the others . kim basinger 's breasts and <unk> should have had their own agents for the screen time they get in this film , but i 'm not complaining . basinger 's a rare beauty who in this early role as largo 's mistress mixes incredible <unk> with a childlike vulnerability that brings out the bond in me , and many others i suspect . ( her lips and <unk> are pretty sweet , too . ) it 's not a well - constructed film . it 's a knockoff of a better bond movie with a sloppy storyline , a terrible score , and a flat ending . but it does have connery , proving his was the definitive take on cinema 's definitive secret agent , even if he steals a page or two from my 007 , mr . moore . the end result is entertaining enough , so i 'm not complaining .\n",
      "\n",
      "half of query\n",
      " yes , it 's sean connery playing bond again , looking more alive and into his part than any time since the first time they made this film , in 1965 when it was called \" thunderball \" . but the tongue is so firmly in cheek one wonders if connery is n't employing a few observed tricks from his friend and more humorous successor , roger moore . moore is my favorite bond , but connery makes a strong case for himself in this unusual outing . the only serious bond film not made under the <unk> of the classic eon bond series , \" never say never again \" is an irreverent return to the well . soft on action , it 's nevertheless strong on character and clever dialogue . bond , it 's made clear right away , is a man in <unk> . no matter how many times he has saved the world , his new boss thinks little of his fat lifestyle . \" too many free <unk> , that 's your problem ... caused by eating too much red meat , white bread , too many <unk> . \" \" then i shall cut out the white bread , sir , \" bond smartly replies . an early fight sequence in a <unk> represents the movie 's high point action - wise , with bond and an attacker fighting their way through a kitchen , a bedroom , and a laboratory before bond finally <unk> his opponent , ironically with no small help from those free <unk> . humor is liberally applied in the film , rather more cleverly than most of moore 's outings , though connery seems to be having more fun sending himself up as a result of moore 's less <unk> example . was it because he was making a good chunk of the gross ? or was it working for less <unk> producers ? whatever it is , the screenplay serves his laid - back style well , and the result is richer and more entertaining than connery 's prior two eon bond outings , \" you only live twice \" and \" diamonds are forever \" . the <unk> <unk>\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "generated\n",
      "<unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>\n"
     ]
    }
   ],
   "source": [
    "model.eval()\n",
    "with torch.no_grad():\n",
    "    for i, batch in enumerate(test_iter, 1):\n",
    "        if i == 3:\n",
    "            break\n",
    "        idx = torch.randint(1, len(b.text), size=(1,)).item()\n",
    "        batch_x, label = map(lambda x: x.to(device), [batch.text, batch.label])\n",
    "        batch_x = torch.LongTensor([id_.item() for id_ in batch_x[idx] if id_ != 1]) # add unk token\n",
    "        batch_x = filter_unk(batch_x)\n",
    "\n",
    "        half_review = torch.cat([batch_x[:len(batch_x)//2], torch.LongTensor([0,0])])\n",
    "\n",
    "        prev_state = model.init_state(bs=1)\n",
    "        prev_state = list(map(lambda x: x.to(device), prev_state))\n",
    "\n",
    "        print('\\nfull query\\n {}'.format(reverse_token(batch_x)))\n",
    "        print('\\nhalf of query\\n {}'.format(reverse_token(half_review)))\n",
    "\n",
    "        # input half of sentence\n",
    "        out, _ = model(half_review.view(1,-1), prev_state)\n",
    "        # generated first new token 단어\n",
    "        out_ = torch.argmax(out[-1,:]).squeeze()\n",
    "        new_seq = torch.cat([half_review, out_.view(1,)])\n",
    "        \n",
    "        nforce_t_text = []\n",
    "        for _ in range(100):    \n",
    "            # get final hidden state\n",
    "            prev_state = model.init_state(bs=1) # init prev state because re-read entire sentence\n",
    "            prev_state = list(map(lambda x: x.to(device), prev_state))\n",
    "            out, _ = model(new_seq.view(1,-1), prev_state)\n",
    "            \n",
    "            # next token\n",
    "            out_ = torch.argmax(out[-1,:]).squeeze()\n",
    "\n",
    "            # generated new token\n",
    "            nforce_t_text.append(out_.item())\n",
    "\n",
    "            # concat new words with previous sentence\n",
    "            new_seq = torch.cat([new_seq, out_.view(1,)])\n",
    "            \n",
    "        print('\\ngenerated')\n",
    "        print(' '.join([TEXT.vocab.itos[i] for i in nforce_t_text]))\n",
    "        generated_text.append(nforce_t_text)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Use another Iterator\n",
    "- BPTTIterator: deprecated"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 257,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import torchtext\n",
    "# train_iter, valid_iter, test_iter = torchtext.data.BPTTIterator.splits(\n",
    "#     (train_data, validation_data, test_data),\n",
    "#     batch_size=10, \n",
    "#     bptt_len=50, # seq_len\n",
    "#     device=-1,\n",
    "#     repeat=False,\n",
    "#     shuffle=False\n",
    "# )\n",
    "# b = next(iter(train_iter)) # bs_seq_len = [total seq len / bs]\n",
    "# a = next(iter(train_data))\n",
    "# print(\"bs: {};\\nbs_seq_le:{};\\ntotal_seq_len: {}\".format(vars(b)['text'].shape[0], vars(b)['text'].shape[1], len(a.text)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000],\n",
       "        [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000],\n",
       "        [ 0.2720, -0.0620, -0.1884,  ...,  0.1302, -0.1832,  0.1323],\n",
       "        ...,\n",
       "        [ 0.3663, -0.1318, -0.4393,  ...,  0.1486, -0.4003,  0.2568],\n",
       "        [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000],\n",
       "        [ 0.4093,  0.3033,  0.3174,  ...,  0.1771,  0.2245, -0.2042]])"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# bs=3; epoch=5;\n",
    "# model = net(voc_size=len(TEXT.vocab), emb_size=300, hidn_size=50)\n",
    "# model.apply(init_weight)\n",
    "# model.emb.weight.data.copy_(TEXT.vocab.vectors)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/henry/anaconda3/envs/torch37/lib/python3.7/site-packages/torchtext/data/batch.py:23: UserWarning: Batch class will be retired in the 0.8.0 release and moved to torchtext.legacy. Please see 0.7.0 release notes for further information.\n",
      "  warnings.warn('{} class will be retired in the 0.8.0 release and moved to torchtext.legacy. Please see 0.7.0 release notes for further information.'.format(self.__class__.__name__), UserWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor(9.8319, grad_fn=<NllLossBackward>)\n",
      "tensor(9.6617, grad_fn=<NllLossBackward>)\n",
      "tensor(9.0157, grad_fn=<NllLossBackward>)\n",
      "tensor(7.8255, grad_fn=<NllLossBackward>)\n",
      "tensor(6.3537, grad_fn=<NllLossBackward>)\n"
     ]
    }
   ],
   "source": [
    "# optimizer = torch.optim.Adam(model.parameters(), lr=0.01,  amsgrad=False)\n",
    "\n",
    "# loss_func = nn.CrossEntropyLoss()\n",
    "# model.to(device)\n",
    "\n",
    "# model.train()\n",
    "# for _ in range(epoch):\n",
    "#     i = 0\n",
    "#     for batch in train_iter:\n",
    "#         i+=1\n",
    "#         batch_x, batch_y = map(lambda x: x.to(device), [batch.text, batch.target])\n",
    "#         prev_state = model.init_state(bs=len(batch_x))\n",
    "#         prev_state = list(map(lambda x: x.to(device), prev_state))\n",
    "#         out, prev_state = model(batch_x, prev_state)\n",
    "        \n",
    "#         optimizer.zero_grad()\n",
    "#         loss = loss_func(out, batch_y.view(batch_y.size()[0]*batch_y.size()[1]))\n",
    "#         print(loss)\n",
    "#         loss.backward()\n",
    "#         optimizer.step()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "torch37",
   "language": "python",
   "name": "torch37"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
